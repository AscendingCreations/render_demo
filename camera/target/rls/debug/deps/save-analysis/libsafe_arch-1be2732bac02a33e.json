{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2","program":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=1be2732bac02a33e","-C","extra-filename=-1be2732bac02a33e","--out-dir","c:\\Sources\\demo\\camera\\target\\rls\\debug\\deps","-L","dependency=c:\\Sources\\demo\\camera\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Sources\\demo\\camera\\target\\rls\\debug\\deps\\libbytemuck-acd435ea7327020d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\andrew.wheeler.STRUCTURETEC\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Sources\\demo\\camera\\target\\rls\\debug\\deps\\libsafe_arch-1be2732bac02a33e.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[11587794333030187083,0]},"crate_root":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src","external_crates":[{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[267229713070244971,0]}},{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2483068884080073872,0]}},{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15143829146767998538,0]}},{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[15431135529085260534,0]}}],"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":91}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12442,"byte_end":12495,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12496,"byte_end":12499,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12500,"byte_end":12579,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12580,"byte_end":12653,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12654,"byte_end":12722,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12723,"byte_end":12739,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12740,"byte_end":12771,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12772,"byte_end":12775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12776,"byte_end":12788,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12789,"byte_end":12867,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12868,"byte_end":12934,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12935,"byte_end":13003,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13004,"byte_end":13080,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13081,"byte_end":13124,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13125,"byte_end":13198,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13199,"byte_end":13279,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13280,"byte_end":13354,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13355,"byte_end":13430,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13431,"byte_end":13508,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13509,"byte_end":13512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13513,"byte_end":13530,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13531,"byte_end":13608,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13609,"byte_end":13683,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13684,"byte_end":13763,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13764,"byte_end":13820,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13821,"byte_end":13824,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13825,"byte_end":13895,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13896,"byte_end":13975,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13976,"byte_end":14056,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14057,"byte_end":14120,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14121,"byte_end":14124,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14125,"byte_end":14199,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14200,"byte_end":14280,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14281,"byte_end":14355,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14356,"byte_end":14434,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14435,"byte_end":14497,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14498,"byte_end":14562,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14563,"byte_end":14566,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14567,"byte_end":14592,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14593,"byte_end":14669,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14670,"byte_end":14673,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14674,"byte_end":14713,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14714,"byte_end":14794,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14795,"byte_end":14875,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14876,"byte_end":14912,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14913,"byte_end":14954,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14955,"byte_end":15029,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15030,"byte_end":15107,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15108,"byte_end":15187,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15188,"byte_end":15247,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15248,"byte_end":15293,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15294,"byte_end":15365,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15366,"byte_end":15422,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15423,"byte_end":15455,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15456,"byte_end":15535,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15536,"byte_end":15615,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15616,"byte_end":15673,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15674,"byte_end":15745,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15746,"byte_end":15813,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15814,"byte_end":15872,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15873,"byte_end":15951,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15952,"byte_end":16031,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16032,"byte_end":16112,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16113,"byte_end":16191,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16192,"byte_end":16237,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16238,"byte_end":16318,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16319,"byte_end":16395,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16396,"byte_end":16408,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16409,"byte_end":16485,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16486,"byte_end":16564,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16565,"byte_end":16645,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16646,"byte_end":16665,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16666,"byte_end":16688,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16689,"byte_end":16766,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16767,"byte_end":16839,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16840,"byte_end":16920,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16921,"byte_end":16987,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16988,"byte_end":17065,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17066,"byte_end":17114,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17115,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17194,"byte_end":17270,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17271,"byte_end":17350,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17351,"byte_end":17430,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17431,"byte_end":17492,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17493,"byte_end":17564,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17565,"byte_end":17602,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17603,"byte_end":17682,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17683,"byte_end":17763,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17764,"byte_end":17796,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17797,"byte_end":17861,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17862,"byte_end":17927,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17928,"byte_end":17997,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17998,"byte_end":18075,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18076,"byte_end":18147,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18148,"byte_end":18225,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18226,"byte_end":18305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18306,"byte_end":18380,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18381,"byte_end":18393,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18394,"byte_end":18471,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18472,"byte_end":18551,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18552,"byte_end":18583,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18584,"byte_end":18659,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18660,"byte_end":18730,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18731,"byte_end":18811,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18812,"byte_end":18891,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18892,"byte_end":18968,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18969,"byte_end":19042,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19043,"byte_end":19123,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19124,"byte_end":19200,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19201,"byte_end":19279,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19280,"byte_end":19343,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19420,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19421,"byte_end":19498,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19499,"byte_end":19578,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19579,"byte_end":19641,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19642,"byte_end":19718,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19719,"byte_end":19735,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19736,"byte_end":19815,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19816,"byte_end":19851,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19852,"byte_end":19926,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19927,"byte_end":19980,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19981,"byte_end":20058,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20059,"byte_end":20139,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20140,"byte_end":20218,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20219,"byte_end":20284,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20285,"byte_end":20365,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20366,"byte_end":20444,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20445,"byte_end":20500,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20501,"byte_end":20581,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20582,"byte_end":20638,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20639,"byte_end":20719,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20720,"byte_end":20795,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20796,"byte_end":20873,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20874,"byte_end":20951,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20952,"byte_end":21030,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21031,"byte_end":21098,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21099,"byte_end":21119,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21120,"byte_end":21200,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21201,"byte_end":21272,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21273,"byte_end":21352,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21353,"byte_end":21381,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21382,"byte_end":21408,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21409,"byte_end":21465,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21466,"byte_end":21543,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21544,"byte_end":21622,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21623,"byte_end":21682,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21683,"byte_end":21705,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21706,"byte_end":21785,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21786,"byte_end":21866,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21867,"byte_end":21945,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21946,"byte_end":21964,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21965,"byte_end":22029,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22030,"byte_end":22107,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22108,"byte_end":22182,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22183,"byte_end":22222,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22223,"byte_end":22302,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22303,"byte_end":22383,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22384,"byte_end":22427,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22428,"byte_end":22507,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22508,"byte_end":22588,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22589,"byte_end":22666,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22746,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22747,"byte_end":22770,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22771,"byte_end":22851,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22852,"byte_end":22898,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996443,"byte_end":8996447,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996120,"byte_end":8996180,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996181,"byte_end":8996184,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996185,"byte_end":8996263,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996264,"byte_end":8996337,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996338,"byte_end":8996379,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996380,"byte_end":8996400,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996401,"byte_end":8996431,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996448,"byte_end":8996458,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997011,"byte_end":8997019,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996842,"byte_end":8996880,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996883,"byte_end":8996886,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996889,"byte_end":8996967,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996970,"byte_end":8996981,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996984,"byte_end":8997001,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997246,"byte_end":8997256,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997063,"byte_end":8997099,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997102,"byte_end":8997105,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997108,"byte_end":8997185,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997188,"byte_end":8997202,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997205,"byte_end":8997216,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997219,"byte_end":8997236,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997490,"byte_end":8997497,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997306,"byte_end":8997369,"line_start":53,"line_end":53,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997372,"byte_end":8997375,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997378,"byte_end":8997446,"line_start":55,"line_end":55,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997449,"byte_end":8997460,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997463,"byte_end":8997480,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997755,"byte_end":8997764,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997567,"byte_end":8997630,"line_start":62,"line_end":62,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997633,"byte_end":8997636,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997639,"byte_end":8997711,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997714,"byte_end":8997725,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997728,"byte_end":8997745,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003438,"byte_end":9003443,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003115,"byte_end":9003175,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003176,"byte_end":9003179,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003180,"byte_end":9003258,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003259,"byte_end":9003332,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003333,"byte_end":9003374,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003375,"byte_end":9003395,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003396,"byte_end":9003426,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003444,"byte_end":9003455,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004017,"byte_end":9004025,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003847,"byte_end":9003886,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003889,"byte_end":9003892,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003895,"byte_end":9003973,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003976,"byte_end":9003987,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003990,"byte_end":9004007,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004254,"byte_end":9004264,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004069,"byte_end":9004106,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004109,"byte_end":9004112,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004115,"byte_end":9004193,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004196,"byte_end":9004210,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004213,"byte_end":9004224,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004227,"byte_end":9004244,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004495,"byte_end":9004502,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004314,"byte_end":9004378,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004381,"byte_end":9004384,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004387,"byte_end":9004451,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004454,"byte_end":9004465,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004468,"byte_end":9004485,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004757,"byte_end":9004766,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004572,"byte_end":9004636,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004639,"byte_end":9004642,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004645,"byte_end":9004713,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004716,"byte_end":9004727,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004730,"byte_end":9004747,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010276,"byte_end":9010281,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9009796,"byte_end":9009852,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9009853,"byte_end":9009856,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9009857,"byte_end":9009930,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9009931,"byte_end":9010009,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010010,"byte_end":9010028,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010029,"byte_end":9010109,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010110,"byte_end":9010187,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010188,"byte_end":9010212,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010213,"byte_end":9010233,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010234,"byte_end":9010264,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010282,"byte_end":9010293,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018625,"byte_end":9018629,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018301,"byte_end":9018362,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018363,"byte_end":9018366,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018367,"byte_end":9018445,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018446,"byte_end":9018519,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018520,"byte_end":9018561,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018562,"byte_end":9018582,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018583,"byte_end":9018613,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018630,"byte_end":9018640,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019193,"byte_end":9019201,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019024,"byte_end":9019062,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019065,"byte_end":9019068,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019071,"byte_end":9019149,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019152,"byte_end":9019163,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019166,"byte_end":9019183,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019428,"byte_end":9019438,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019245,"byte_end":9019281,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019284,"byte_end":9019287,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019290,"byte_end":9019367,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019370,"byte_end":9019384,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019387,"byte_end":9019398,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019401,"byte_end":9019418,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019667,"byte_end":9019674,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019482,"byte_end":9019545,"line_start":51,"line_end":51,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019548,"byte_end":9019551,"line_start":52,"line_end":52,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019554,"byte_end":9019623,"line_start":53,"line_end":53,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019626,"byte_end":9019637,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019640,"byte_end":9019657,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019933,"byte_end":9019942,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019744,"byte_end":9019807,"line_start":60,"line_end":60,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019810,"byte_end":9019813,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019816,"byte_end":9019889,"line_start":62,"line_end":62,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019892,"byte_end":9019903,"line_start":63,"line_end":63,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019906,"byte_end":9019923,"line_start":64,"line_end":64,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025735,"byte_end":9025740,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025411,"byte_end":9025472,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025473,"byte_end":9025476,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025477,"byte_end":9025555,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025556,"byte_end":9025629,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025630,"byte_end":9025671,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025672,"byte_end":9025692,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025693,"byte_end":9025723,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025741,"byte_end":9025752,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026314,"byte_end":9026322,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026144,"byte_end":9026183,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026186,"byte_end":9026189,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026192,"byte_end":9026270,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026273,"byte_end":9026284,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026287,"byte_end":9026304,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026551,"byte_end":9026561,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026366,"byte_end":9026403,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026406,"byte_end":9026409,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026412,"byte_end":9026490,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026493,"byte_end":9026507,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026510,"byte_end":9026521,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026524,"byte_end":9026541,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026792,"byte_end":9026799,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026611,"byte_end":9026675,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026678,"byte_end":9026681,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026684,"byte_end":9026748,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026751,"byte_end":9026762,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026765,"byte_end":9026782,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027054,"byte_end":9027063,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026869,"byte_end":9026933,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026936,"byte_end":9026939,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026942,"byte_end":9027010,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027013,"byte_end":9027024,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027027,"byte_end":9027044,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032573,"byte_end":9032578,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032093,"byte_end":9032149,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032150,"byte_end":9032153,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032154,"byte_end":9032227,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032228,"byte_end":9032306,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032307,"byte_end":9032325,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032326,"byte_end":9032406,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032407,"byte_end":9032484,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032485,"byte_end":9032509,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032510,"byte_end":9032530,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032531,"byte_end":9032561,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032579,"byte_end":9032590,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040875,"byte_end":9040883,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040535,"byte_end":9040556,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040557,"byte_end":9040564,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040565,"byte_end":9040588,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040589,"byte_end":9040640,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040641,"byte_end":9040692,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040693,"byte_end":9040731,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040732,"byte_end":9040774,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040775,"byte_end":9040782,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040783,"byte_end":9040794,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040795,"byte_end":9040812,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041318,"byte_end":9041328,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9040955,"byte_end":9040999,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041000,"byte_end":9041007,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041008,"byte_end":9041031,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041032,"byte_end":9041083,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041084,"byte_end":9041135,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041136,"byte_end":9041176,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041177,"byte_end":9041217,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041218,"byte_end":9041225,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041226,"byte_end":9041237,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041238,"byte_end":9041255,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041740,"byte_end":9041751,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041400,"byte_end":9041420,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041421,"byte_end":9041428,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041429,"byte_end":9041452,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041453,"byte_end":9041504,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041505,"byte_end":9041556,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041557,"byte_end":9041598,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041599,"byte_end":9041639,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041640,"byte_end":9041647,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041648,"byte_end":9041659,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041660,"byte_end":9041677,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042169,"byte_end":9042183,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041823,"byte_end":9041846,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041847,"byte_end":9041854,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041855,"byte_end":9041878,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041879,"byte_end":9041930,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041931,"byte_end":9041982,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9041983,"byte_end":9042027,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042028,"byte_end":9042068,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042069,"byte_end":9042076,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042077,"byte_end":9042088,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042089,"byte_end":9042106,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042631,"byte_end":9042647,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042258,"byte_end":9042280,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042281,"byte_end":9042284,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042285,"byte_end":9042301,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042302,"byte_end":9042309,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042310,"byte_end":9042333,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042334,"byte_end":9042385,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042386,"byte_end":9042437,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042438,"byte_end":9042483,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042484,"byte_end":9042530,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042531,"byte_end":9042538,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042539,"byte_end":9042550,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042551,"byte_end":9042568,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043126,"byte_end":9043144,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042721,"byte_end":9042766,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042767,"byte_end":9042770,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042771,"byte_end":9042787,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042788,"byte_end":9042795,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042796,"byte_end":9042819,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042820,"byte_end":9042871,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042872,"byte_end":9042923,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042924,"byte_end":9042971,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9042972,"byte_end":9043025,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043026,"byte_end":9043033,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043034,"byte_end":9043045,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043046,"byte_end":9043063,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043598,"byte_end":9043614,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043218,"byte_end":9043240,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043241,"byte_end":9043244,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043245,"byte_end":9043261,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043262,"byte_end":9043269,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043270,"byte_end":9043293,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043294,"byte_end":9043345,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043346,"byte_end":9043397,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043398,"byte_end":9043443,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043444,"byte_end":9043497,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043498,"byte_end":9043505,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043506,"byte_end":9043517,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043518,"byte_end":9043535,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044121,"byte_end":9044139,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043688,"byte_end":9043733,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043734,"byte_end":9043737,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043738,"byte_end":9043754,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043755,"byte_end":9043762,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043763,"byte_end":9043786,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043787,"byte_end":9043838,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043839,"byte_end":9043890,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043891,"byte_end":9043938,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9043939,"byte_end":9044020,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044021,"byte_end":9044028,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044029,"byte_end":9044040,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044041,"byte_end":9044058,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044585,"byte_end":9044601,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044213,"byte_end":9044234,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044235,"byte_end":9044238,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044239,"byte_end":9044255,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044256,"byte_end":9044263,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044264,"byte_end":9044287,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044288,"byte_end":9044339,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044340,"byte_end":9044391,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044392,"byte_end":9044437,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044438,"byte_end":9044484,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044485,"byte_end":9044492,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044493,"byte_end":9044504,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044505,"byte_end":9044522,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045107,"byte_end":9045125,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044675,"byte_end":9044719,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044720,"byte_end":9044723,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044724,"byte_end":9044740,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044741,"byte_end":9044748,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044749,"byte_end":9044772,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044773,"byte_end":9044824,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044825,"byte_end":9044876,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044877,"byte_end":9044924,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9044925,"byte_end":9045006,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045007,"byte_end":9045014,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045015,"byte_end":9045026,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045027,"byte_end":9045044,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045572,"byte_end":9045588,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045199,"byte_end":9045221,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045222,"byte_end":9045225,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045226,"byte_end":9045242,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045243,"byte_end":9045250,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045251,"byte_end":9045274,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045275,"byte_end":9045326,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045327,"byte_end":9045378,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045379,"byte_end":9045424,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045425,"byte_end":9045471,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045472,"byte_end":9045479,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045480,"byte_end":9045491,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045492,"byte_end":9045509,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046095,"byte_end":9046113,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045662,"byte_end":9045707,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045708,"byte_end":9045711,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045712,"byte_end":9045728,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045729,"byte_end":9045736,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045737,"byte_end":9045760,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045761,"byte_end":9045812,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045813,"byte_end":9045864,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045865,"byte_end":9045912,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045913,"byte_end":9045994,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9045995,"byte_end":9046002,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046003,"byte_end":9046014,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046015,"byte_end":9046032,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046552,"byte_end":9046568,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046187,"byte_end":9046208,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046209,"byte_end":9046212,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046213,"byte_end":9046229,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046230,"byte_end":9046237,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046238,"byte_end":9046261,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046262,"byte_end":9046313,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046314,"byte_end":9046365,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046366,"byte_end":9046411,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046412,"byte_end":9046451,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046452,"byte_end":9046459,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046460,"byte_end":9046471,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046472,"byte_end":9046489,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047074,"byte_end":9047092,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046642,"byte_end":9046686,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046687,"byte_end":9046690,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046691,"byte_end":9046707,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046708,"byte_end":9046715,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046716,"byte_end":9046739,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046740,"byte_end":9046791,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046792,"byte_end":9046843,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046844,"byte_end":9046891,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046892,"byte_end":9046973,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046974,"byte_end":9046981,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046982,"byte_end":9046993,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9046994,"byte_end":9047011,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047540,"byte_end":9047557,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047166,"byte_end":9047188,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047189,"byte_end":9047192,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047193,"byte_end":9047209,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047210,"byte_end":9047217,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047218,"byte_end":9047241,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047242,"byte_end":9047293,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047294,"byte_end":9047345,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047346,"byte_end":9047392,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047393,"byte_end":9047439,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047440,"byte_end":9047447,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047448,"byte_end":9047459,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047460,"byte_end":9047477,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048031,"byte_end":9048050,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047632,"byte_end":9047677,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047678,"byte_end":9047681,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047682,"byte_end":9047698,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047699,"byte_end":9047706,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047707,"byte_end":9047730,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047731,"byte_end":9047782,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047783,"byte_end":9047834,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047835,"byte_end":9047883,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047884,"byte_end":9047930,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047931,"byte_end":9047938,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047939,"byte_end":9047950,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9047951,"byte_end":9047968,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048495,"byte_end":9048512,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048125,"byte_end":9048150,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048151,"byte_end":9048154,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048155,"byte_end":9048171,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048172,"byte_end":9048179,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048180,"byte_end":9048203,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048204,"byte_end":9048255,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048256,"byte_end":9048307,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048308,"byte_end":9048354,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048355,"byte_end":9048394,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048395,"byte_end":9048402,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048403,"byte_end":9048414,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048415,"byte_end":9048432,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049017,"byte_end":9049036,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048587,"byte_end":9048635,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048636,"byte_end":9048639,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048640,"byte_end":9048656,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048657,"byte_end":9048664,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048665,"byte_end":9048688,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048689,"byte_end":9048740,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048741,"byte_end":9048792,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048793,"byte_end":9048841,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048842,"byte_end":9048916,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048917,"byte_end":9048924,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048925,"byte_end":9048936,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9048937,"byte_end":9048954,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049487,"byte_end":9049504,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049111,"byte_end":9049135,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049136,"byte_end":9049139,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049140,"byte_end":9049156,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049157,"byte_end":9049164,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049165,"byte_end":9049188,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049189,"byte_end":9049240,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049241,"byte_end":9049292,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049293,"byte_end":9049339,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049340,"byte_end":9049386,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049387,"byte_end":9049394,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049395,"byte_end":9049406,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049407,"byte_end":9049424,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050008,"byte_end":9050027,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049579,"byte_end":9049626,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049627,"byte_end":9049630,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049631,"byte_end":9049647,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049648,"byte_end":9049655,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049656,"byte_end":9049679,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049680,"byte_end":9049731,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049732,"byte_end":9049783,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049784,"byte_end":9049832,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049833,"byte_end":9049907,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049908,"byte_end":9049915,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049916,"byte_end":9049927,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9049928,"byte_end":9049945,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050479,"byte_end":9050496,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050102,"byte_end":9050127,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050128,"byte_end":9050131,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050132,"byte_end":9050148,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050149,"byte_end":9050156,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050157,"byte_end":9050180,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050181,"byte_end":9050232,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050233,"byte_end":9050284,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050285,"byte_end":9050331,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050332,"byte_end":9050378,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050379,"byte_end":9050386,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050387,"byte_end":9050398,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050399,"byte_end":9050416,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051001,"byte_end":9051020,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050571,"byte_end":9050619,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050620,"byte_end":9050623,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050624,"byte_end":9050640,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050641,"byte_end":9050648,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050649,"byte_end":9050672,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050673,"byte_end":9050724,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050725,"byte_end":9050776,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050777,"byte_end":9050825,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050826,"byte_end":9050900,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050901,"byte_end":9050908,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050909,"byte_end":9050920,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9050921,"byte_end":9050938,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051478,"byte_end":9051495,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051095,"byte_end":9051119,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051120,"byte_end":9051123,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051124,"byte_end":9051140,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051141,"byte_end":9051148,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051149,"byte_end":9051172,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051173,"byte_end":9051224,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051225,"byte_end":9051276,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051277,"byte_end":9051323,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051324,"byte_end":9051377,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051378,"byte_end":9051385,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051386,"byte_end":9051397,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051398,"byte_end":9051415,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051999,"byte_end":9052018,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051570,"byte_end":9051617,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051618,"byte_end":9051621,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051622,"byte_end":9051638,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051639,"byte_end":9051646,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051647,"byte_end":9051670,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051671,"byte_end":9051722,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051723,"byte_end":9051774,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051775,"byte_end":9051823,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051824,"byte_end":9051898,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051899,"byte_end":9051906,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051907,"byte_end":9051918,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9051919,"byte_end":9051936,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052508,"byte_end":9052530,"line_start":418,"line_end":418,"column_start":8,"column_end":30},"name":"cmp_ordinary_mask_m128","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128","value":"pub fn cmp_ordinary_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052093,"byte_end":9052138,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052139,"byte_end":9052142,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052143,"byte_end":9052159,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052160,"byte_end":9052167,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052168,"byte_end":9052191,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052192,"byte_end":9052253,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052254,"byte_end":9052315,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordinary_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052316,"byte_end":9052367,"line_start":412,"line_end":412,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052368,"byte_end":9052407,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052408,"byte_end":9052415,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052416,"byte_end":9052427,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052428,"byte_end":9052445,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053082,"byte_end":9053106,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"cmp_ordinary_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128_s","value":"pub fn cmp_ordinary_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052605,"byte_end":9052673,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052674,"byte_end":9052677,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052678,"byte_end":9052694,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052695,"byte_end":9052702,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052703,"byte_end":9052726,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052727,"byte_end":9052778,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052779,"byte_end":9052845,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordinary_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052846,"byte_end":9052899,"line_start":429,"line_end":429,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052900,"byte_end":9052981,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052982,"byte_end":9052989,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9052990,"byte_end":9053001,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053002,"byte_end":9053019,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053601,"byte_end":9053620,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053181,"byte_end":9053220,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053221,"byte_end":9053224,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053225,"byte_end":9053241,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053242,"byte_end":9053249,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053250,"byte_end":9053273,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053274,"byte_end":9053335,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053336,"byte_end":9053397,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053398,"byte_end":9053446,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053447,"byte_end":9053500,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053501,"byte_end":9053508,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053509,"byte_end":9053520,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053521,"byte_end":9053538,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054158,"byte_end":9054179,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053697,"byte_end":9053759,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053760,"byte_end":9053763,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053764,"byte_end":9053780,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053781,"byte_end":9053788,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053789,"byte_end":9053812,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053813,"byte_end":9053864,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053865,"byte_end":9053931,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053932,"byte_end":9053982,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9053983,"byte_end":9054057,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054058,"byte_end":9054065,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054066,"byte_end":9054077,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054078,"byte_end":9054095,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054585,"byte_end":9054602,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054256,"byte_end":9054278,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054279,"byte_end":9054282,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054283,"byte_end":9054300,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054301,"byte_end":9054308,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054309,"byte_end":9054332,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054333,"byte_end":9054384,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054385,"byte_end":9054436,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054437,"byte_end":9054484,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054485,"byte_end":9054492,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054493,"byte_end":9054504,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054505,"byte_end":9054522,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055015,"byte_end":9055032,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054670,"byte_end":9054708,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054709,"byte_end":9054712,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054713,"byte_end":9054730,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054731,"byte_end":9054738,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054739,"byte_end":9054762,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054763,"byte_end":9054814,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054815,"byte_end":9054866,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054867,"byte_end":9054914,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054915,"byte_end":9054922,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054923,"byte_end":9054934,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9054935,"byte_end":9054952,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055433,"byte_end":9055450,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055100,"byte_end":9055126,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055127,"byte_end":9055130,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055131,"byte_end":9055148,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055149,"byte_end":9055156,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055157,"byte_end":9055180,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055181,"byte_end":9055232,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055233,"byte_end":9055284,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055285,"byte_end":9055332,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055333,"byte_end":9055340,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055341,"byte_end":9055352,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055353,"byte_end":9055370,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055860,"byte_end":9055877,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055518,"byte_end":9055553,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055554,"byte_end":9055557,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055558,"byte_end":9055575,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055576,"byte_end":9055583,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055584,"byte_end":9055607,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055608,"byte_end":9055659,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055660,"byte_end":9055711,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055712,"byte_end":9055759,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055760,"byte_end":9055767,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055768,"byte_end":9055779,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055780,"byte_end":9055797,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056275,"byte_end":9056292,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055945,"byte_end":9055968,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055969,"byte_end":9055972,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055973,"byte_end":9055990,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055991,"byte_end":9055998,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9055999,"byte_end":9056022,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056023,"byte_end":9056074,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056075,"byte_end":9056126,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056127,"byte_end":9056174,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056175,"byte_end":9056182,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056183,"byte_end":9056194,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056195,"byte_end":9056212,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056694,"byte_end":9056712,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056360,"byte_end":9056386,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056387,"byte_end":9056390,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056391,"byte_end":9056408,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056409,"byte_end":9056416,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056417,"byte_end":9056440,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056441,"byte_end":9056492,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056493,"byte_end":9056544,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056545,"byte_end":9056593,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056594,"byte_end":9056601,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056602,"byte_end":9056613,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056614,"byte_end":9056631,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057213,"byte_end":9057239,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056781,"byte_end":9056846,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056847,"byte_end":9056854,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056855,"byte_end":9056878,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056879,"byte_end":9056930,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056931,"byte_end":9056991,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9056992,"byte_end":9057032,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057033,"byte_end":9057040,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057041,"byte_end":9057080,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057081,"byte_end":9057120,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057121,"byte_end":9057132,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057133,"byte_end":9057150,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058150,"byte_end":9058169,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057867,"byte_end":9057918,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057919,"byte_end":9057926,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057927,"byte_end":9057950,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9057951,"byte_end":9058002,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058003,"byte_end":9058049,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058050,"byte_end":9058057,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058058,"byte_end":9058069,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058070,"byte_end":9058087,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058526,"byte_end":9058545,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058223,"byte_end":9058294,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058295,"byte_end":9058302,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058303,"byte_end":9058326,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058327,"byte_end":9058378,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058379,"byte_end":9058425,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058426,"byte_end":9058433,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058434,"byte_end":9058445,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9058446,"byte_end":9058463,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059345,"byte_end":9059353,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059002,"byte_end":9059023,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059024,"byte_end":9059031,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059032,"byte_end":9059055,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059056,"byte_end":9059111,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059112,"byte_end":9059164,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059165,"byte_end":9059203,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059204,"byte_end":9059244,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059245,"byte_end":9059252,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059253,"byte_end":9059264,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059265,"byte_end":9059282,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059796,"byte_end":9059806,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059425,"byte_end":9059469,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059470,"byte_end":9059477,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059478,"byte_end":9059501,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059502,"byte_end":9059557,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059558,"byte_end":9059610,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059611,"byte_end":9059651,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059652,"byte_end":9059695,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059696,"byte_end":9059703,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059704,"byte_end":9059715,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059716,"byte_end":9059733,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060176,"byte_end":9060185,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059878,"byte_end":9059918,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059919,"byte_end":9059926,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059927,"byte_end":9059950,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9059951,"byte_end":9060006,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060007,"byte_end":9060033,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060034,"byte_end":9060075,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060076,"byte_end":9060083,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060084,"byte_end":9060095,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060096,"byte_end":9060113,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060642,"byte_end":9060661,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060272,"byte_end":9060331,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060332,"byte_end":9060339,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060340,"byte_end":9060363,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060364,"byte_end":9060380,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060381,"byte_end":9060417,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060418,"byte_end":9060496,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060497,"byte_end":9060504,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060505,"byte_end":9060516,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060517,"byte_end":9060534,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060535,"byte_end":9060579,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061150,"byte_end":9061165,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060779,"byte_end":9060843,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060844,"byte_end":9060851,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060852,"byte_end":9060875,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060876,"byte_end":9060892,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060893,"byte_end":9060925,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9060926,"byte_end":9061004,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061005,"byte_end":9061012,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061013,"byte_end":9061024,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061025,"byte_end":9061042,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061043,"byte_end":9061087,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061589,"byte_end":9061606,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061222,"byte_end":9061282,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061283,"byte_end":9061290,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061291,"byte_end":9061314,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061315,"byte_end":9061370,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061371,"byte_end":9061405,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061406,"byte_end":9061488,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061489,"byte_end":9061496,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061497,"byte_end":9061508,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061509,"byte_end":9061526,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062179,"byte_end":9062198,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061694,"byte_end":9061734,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061735,"byte_end":9061738,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061739,"byte_end":9061817,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061818,"byte_end":9061898,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061899,"byte_end":9061911,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061912,"byte_end":9061919,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061920,"byte_end":9061943,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061944,"byte_end":9061981,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9061982,"byte_end":9062018,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062019,"byte_end":9062078,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062079,"byte_end":9062086,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062087,"byte_end":9062098,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062099,"byte_end":9062116,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062638,"byte_end":9062646,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062294,"byte_end":9062319,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062320,"byte_end":9062327,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062328,"byte_end":9062351,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062352,"byte_end":9062404,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062405,"byte_end":9062456,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062457,"byte_end":9062495,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062496,"byte_end":9062537,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062538,"byte_end":9062545,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062546,"byte_end":9062557,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062558,"byte_end":9062575,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063087,"byte_end":9063097,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062718,"byte_end":9062766,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062767,"byte_end":9062774,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062775,"byte_end":9062798,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062799,"byte_end":9062851,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062852,"byte_end":9062903,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062904,"byte_end":9062944,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062945,"byte_end":9062986,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062987,"byte_end":9062994,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9062995,"byte_end":9063006,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063007,"byte_end":9063024,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063512,"byte_end":9063520,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063169,"byte_end":9063194,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063195,"byte_end":9063202,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063203,"byte_end":9063226,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063227,"byte_end":9063279,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063280,"byte_end":9063331,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063332,"byte_end":9063370,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063371,"byte_end":9063411,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063412,"byte_end":9063419,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063420,"byte_end":9063431,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063432,"byte_end":9063449,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063961,"byte_end":9063971,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063592,"byte_end":9063640,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063641,"byte_end":9063648,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063649,"byte_end":9063672,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063673,"byte_end":9063725,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063726,"byte_end":9063777,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063778,"byte_end":9063818,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063819,"byte_end":9063860,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063861,"byte_end":9063868,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063869,"byte_end":9063880,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9063881,"byte_end":9063898,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064424,"byte_end":9064435,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064043,"byte_end":9064102,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064103,"byte_end":9064110,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064111,"byte_end":9064134,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064135,"byte_end":9064187,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064188,"byte_end":9064239,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064240,"byte_end":9064281,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064282,"byte_end":9064323,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064324,"byte_end":9064331,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064332,"byte_end":9064343,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064344,"byte_end":9064361,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064914,"byte_end":9064932,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064508,"byte_end":9064586,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064587,"byte_end":9064594,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064595,"byte_end":9064618,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064619,"byte_end":9064671,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064672,"byte_end":9064723,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064724,"byte_end":9064772,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064773,"byte_end":9064813,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064814,"byte_end":9064821,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064822,"byte_end":9064833,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9064834,"byte_end":9064851,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065414,"byte_end":9065432,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065007,"byte_end":9065085,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065086,"byte_end":9065093,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065094,"byte_end":9065117,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065118,"byte_end":9065170,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065171,"byte_end":9065222,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065223,"byte_end":9065271,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065272,"byte_end":9065313,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065314,"byte_end":9065321,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065322,"byte_end":9065333,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065334,"byte_end":9065351,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065860,"byte_end":9065874,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065507,"byte_end":9065545,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065546,"byte_end":9065549,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065550,"byte_end":9065613,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065614,"byte_end":9065621,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065622,"byte_end":9065645,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065646,"byte_end":9065701,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065702,"byte_end":9065732,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065733,"byte_end":9065759,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065760,"byte_end":9065767,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065768,"byte_end":9065779,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065780,"byte_end":9065797,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066271,"byte_end":9066279,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065930,"byte_end":9065951,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065952,"byte_end":9065959,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065960,"byte_end":9065983,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9065984,"byte_end":9066035,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066036,"byte_end":9066087,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066088,"byte_end":9066126,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066127,"byte_end":9066170,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066171,"byte_end":9066178,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066179,"byte_end":9066190,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066191,"byte_end":9066208,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066714,"byte_end":9066724,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066351,"byte_end":9066395,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066396,"byte_end":9066403,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066404,"byte_end":9066427,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066428,"byte_end":9066479,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066480,"byte_end":9066531,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066532,"byte_end":9066572,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066573,"byte_end":9066613,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066614,"byte_end":9066621,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066622,"byte_end":9066633,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066634,"byte_end":9066651,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067135,"byte_end":9067145,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066796,"byte_end":9066816,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066817,"byte_end":9066824,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066825,"byte_end":9066848,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066849,"byte_end":9066900,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066901,"byte_end":9066952,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066953,"byte_end":9066993,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9066994,"byte_end":9067034,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067035,"byte_end":9067042,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067043,"byte_end":9067054,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067055,"byte_end":9067072,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067602,"byte_end":9067617,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067216,"byte_end":9067253,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067254,"byte_end":9067261,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067262,"byte_end":9067285,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067286,"byte_end":9067337,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067338,"byte_end":9067380,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067381,"byte_end":9067424,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067425,"byte_end":9067444,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067445,"byte_end":9067495,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067496,"byte_end":9067501,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067502,"byte_end":9067509,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067510,"byte_end":9067521,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067522,"byte_end":9067539,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068083,"byte_end":9068100,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067675,"byte_end":9067735,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067736,"byte_end":9067743,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067744,"byte_end":9067767,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067768,"byte_end":9067819,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067820,"byte_end":9067864,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067865,"byte_end":9067905,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067906,"byte_end":9067925,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067926,"byte_end":9067976,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067977,"byte_end":9067982,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067983,"byte_end":9067990,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9067991,"byte_end":9068002,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068003,"byte_end":9068020,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068559,"byte_end":9068579,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068158,"byte_end":9068201,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068202,"byte_end":9068209,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068210,"byte_end":9068233,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068234,"byte_end":9068287,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068288,"byte_end":9068335,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068336,"byte_end":9068381,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068382,"byte_end":9068401,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068402,"byte_end":9068452,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068453,"byte_end":9068458,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068459,"byte_end":9068466,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068467,"byte_end":9068478,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068479,"byte_end":9068496,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069062,"byte_end":9069084,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068639,"byte_end":9068705,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068706,"byte_end":9068713,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068714,"byte_end":9068737,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068738,"byte_end":9068791,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068792,"byte_end":9068841,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068842,"byte_end":9068884,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068885,"byte_end":9068904,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068905,"byte_end":9068955,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068956,"byte_end":9068961,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068962,"byte_end":9068969,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068970,"byte_end":9068981,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9068982,"byte_end":9068999,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069476,"byte_end":9069484,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069144,"byte_end":9069205,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069206,"byte_end":9069213,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069214,"byte_end":9069237,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069238,"byte_end":9069290,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069291,"byte_end":9069353,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069354,"byte_end":9069375,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069376,"byte_end":9069383,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069384,"byte_end":9069395,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069396,"byte_end":9069413,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069913,"byte_end":9069923,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069594,"byte_end":9069655,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069656,"byte_end":9069663,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069664,"byte_end":9069687,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069688,"byte_end":9069727,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069728,"byte_end":9069790,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069791,"byte_end":9069812,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069813,"byte_end":9069820,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069821,"byte_end":9069832,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069833,"byte_end":9069850,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070278,"byte_end":9070292,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9069982,"byte_end":9070016,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070017,"byte_end":9070024,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070025,"byte_end":9070048,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070049,"byte_end":9070092,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070093,"byte_end":9070155,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070156,"byte_end":9070177,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070178,"byte_end":9070185,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070186,"byte_end":9070197,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070198,"byte_end":9070215,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070692,"byte_end":9070709,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070352,"byte_end":9070412,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070413,"byte_end":9070420,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070421,"byte_end":9070444,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070445,"byte_end":9070506,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070507,"byte_end":9070569,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070570,"byte_end":9070591,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070592,"byte_end":9070599,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070600,"byte_end":9070611,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070612,"byte_end":9070629,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9071051,"byte_end":9071062,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070820,"byte_end":9070839,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070840,"byte_end":9070847,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070848,"byte_end":9070871,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070872,"byte_end":9070909,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070910,"byte_end":9070950,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070951,"byte_end":9070958,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070959,"byte_end":9070970,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9070971,"byte_end":9070988,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073204,"byte_end":9073213,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9072916,"byte_end":9072939,"line_start":1095,"line_end":1095,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9072940,"byte_end":9072947,"line_start":1096,"line_end":1096,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9072948,"byte_end":9072971,"line_start":1097,"line_end":1097,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9072972,"byte_end":9073025,"line_start":1098,"line_end":1098,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073026,"byte_end":9073062,"line_start":1099,"line_end":1099,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073063,"byte_end":9073103,"line_start":1100,"line_end":1100,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073104,"byte_end":9073111,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073112,"byte_end":9073123,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073124,"byte_end":9073141,"line_start":1103,"line_end":1103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073583,"byte_end":9073594,"line_start":1119,"line_end":1119,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073272,"byte_end":9073318,"line_start":1109,"line_end":1109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073319,"byte_end":9073326,"line_start":1110,"line_end":1110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073327,"byte_end":9073350,"line_start":1111,"line_end":1111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073351,"byte_end":9073402,"line_start":1112,"line_end":1112,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073403,"byte_end":9073441,"line_start":1113,"line_end":1113,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073442,"byte_end":9073482,"line_start":1114,"line_end":1114,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073483,"byte_end":9073490,"line_start":1115,"line_end":1115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073491,"byte_end":9073502,"line_start":1116,"line_end":1116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073503,"byte_end":9073520,"line_start":1117,"line_end":1117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074003,"byte_end":9074013,"line_start":1134,"line_end":1134,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073653,"byte_end":9073697,"line_start":1123,"line_end":1123,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073698,"byte_end":9073705,"line_start":1124,"line_end":1124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073706,"byte_end":9073729,"line_start":1125,"line_end":1125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073730,"byte_end":9073785,"line_start":1126,"line_end":1126,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073786,"byte_end":9073816,"line_start":1127,"line_end":1127,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073817,"byte_end":9073843,"line_start":1128,"line_end":1128,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073844,"byte_end":9073869,"line_start":1129,"line_end":1129,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073870,"byte_end":9073914,"line_start":1130,"line_end":1130,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073915,"byte_end":9073922,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9073923,"byte_end":9073940,"line_start":1132,"line_end":1132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074406,"byte_end":9074418,"line_start":1148,"line_end":1148,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074101,"byte_end":9074154,"line_start":1138,"line_end":1138,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074155,"byte_end":9074162,"line_start":1139,"line_end":1139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074163,"byte_end":9074186,"line_start":1140,"line_end":1140,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074187,"byte_end":9074242,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074243,"byte_end":9074263,"line_start":1142,"line_end":1142,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074264,"byte_end":9074292,"line_start":1143,"line_end":1143,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074293,"byte_end":9074317,"line_start":1144,"line_end":1144,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074318,"byte_end":9074325,"line_start":1145,"line_end":1145,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074326,"byte_end":9074343,"line_start":1146,"line_end":1146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074870,"byte_end":9074886,"line_start":1163,"line_end":1163,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074492,"byte_end":9074558,"line_start":1152,"line_end":1152,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074559,"byte_end":9074566,"line_start":1153,"line_end":1153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074567,"byte_end":9074590,"line_start":1154,"line_end":1154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074591,"byte_end":9074646,"line_start":1155,"line_end":1155,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074647,"byte_end":9074677,"line_start":1156,"line_end":1156,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074678,"byte_end":9074710,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074711,"byte_end":9074736,"line_start":1158,"line_end":1158,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074737,"byte_end":9074781,"line_start":1159,"line_end":1159,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074782,"byte_end":9074789,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074790,"byte_end":9074807,"line_start":1161,"line_end":1161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075350,"byte_end":9075368,"line_start":1178,"line_end":1178,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9074975,"byte_end":9075036,"line_start":1167,"line_end":1167,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075037,"byte_end":9075044,"line_start":1168,"line_end":1168,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075045,"byte_end":9075068,"line_start":1169,"line_end":1169,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075069,"byte_end":9075124,"line_start":1170,"line_end":1170,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075125,"byte_end":9075155,"line_start":1171,"line_end":1171,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075156,"byte_end":9075190,"line_start":1172,"line_end":1172,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075191,"byte_end":9075216,"line_start":1173,"line_end":1173,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075217,"byte_end":9075261,"line_start":1174,"line_end":1174,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075262,"byte_end":9075269,"line_start":1175,"line_end":1175,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075270,"byte_end":9075287,"line_start":1176,"line_end":1176,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075963,"byte_end":9075983,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075457,"byte_end":9075501,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075502,"byte_end":9075505,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075506,"byte_end":9075584,"line_start":1184,"line_end":1184,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075585,"byte_end":9075665,"line_start":1185,"line_end":1185,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075666,"byte_end":9075678,"line_start":1186,"line_end":1186,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075679,"byte_end":9075686,"line_start":1187,"line_end":1187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075687,"byte_end":9075710,"line_start":1188,"line_end":1188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075711,"byte_end":9075766,"line_start":1189,"line_end":1189,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075767,"byte_end":9075792,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075793,"byte_end":9075829,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075830,"byte_end":9075874,"line_start":1192,"line_end":1192,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075875,"byte_end":9075882,"line_start":1193,"line_end":1193,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9075883,"byte_end":9075900,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076405,"byte_end":9076413,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076063,"byte_end":9076084,"line_start":1200,"line_end":1200,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076085,"byte_end":9076092,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076093,"byte_end":9076116,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076117,"byte_end":9076168,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076169,"byte_end":9076221,"line_start":1204,"line_end":1204,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076222,"byte_end":9076260,"line_start":1205,"line_end":1205,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076261,"byte_end":9076304,"line_start":1206,"line_end":1206,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076305,"byte_end":9076312,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076313,"byte_end":9076324,"line_start":1208,"line_end":1208,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076325,"byte_end":9076342,"line_start":1209,"line_end":1209,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076850,"byte_end":9076860,"line_start":1226,"line_end":1226,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076485,"byte_end":9076529,"line_start":1215,"line_end":1215,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076530,"byte_end":9076537,"line_start":1216,"line_end":1216,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076538,"byte_end":9076561,"line_start":1217,"line_end":1217,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076562,"byte_end":9076613,"line_start":1218,"line_end":1218,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076614,"byte_end":9076666,"line_start":1219,"line_end":1219,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076667,"byte_end":9076707,"line_start":1220,"line_end":1220,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076708,"byte_end":9076749,"line_start":1221,"line_end":1221,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076750,"byte_end":9076757,"line_start":1222,"line_end":1222,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076758,"byte_end":9076769,"line_start":1223,"line_end":1223,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076770,"byte_end":9076787,"line_start":1224,"line_end":1224,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077611,"byte_end":9077630,"line_start":1245,"line_end":1245,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076932,"byte_end":9076987,"line_start":1230,"line_end":1230,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076988,"byte_end":9076995,"line_start":1231,"line_end":1231,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9076996,"byte_end":9077019,"line_start":1232,"line_end":1232,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077020,"byte_end":9077075,"line_start":1233,"line_end":1233,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077076,"byte_end":9077131,"line_start":1234,"line_end":1234,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077132,"byte_end":9077190,"line_start":1235,"line_end":1235,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077191,"byte_end":9077250,"line_start":1236,"line_end":1236,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077251,"byte_end":9077307,"line_start":1237,"line_end":1237,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077308,"byte_end":9077360,"line_start":1238,"line_end":1238,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077361,"byte_end":9077414,"line_start":1239,"line_end":1239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077415,"byte_end":9077468,"line_start":1240,"line_end":1240,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077469,"byte_end":9077522,"line_start":1241,"line_end":1241,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077523,"byte_end":9077530,"line_start":1242,"line_end":1242,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077531,"byte_end":9077548,"line_start":1243,"line_end":1243,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078145,"byte_end":9078161,"line_start":1262,"line_end":1262,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077768,"byte_end":9077820,"line_start":1251,"line_end":1251,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077821,"byte_end":9077828,"line_start":1252,"line_end":1252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077829,"byte_end":9077852,"line_start":1253,"line_end":1253,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077853,"byte_end":9077904,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077905,"byte_end":9077956,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9077957,"byte_end":9078003,"line_start":1256,"line_end":1256,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078004,"byte_end":9078044,"line_start":1257,"line_end":1257,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078045,"byte_end":9078052,"line_start":1258,"line_end":1258,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078053,"byte_end":9078064,"line_start":1259,"line_end":1259,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078065,"byte_end":9078082,"line_start":1260,"line_end":1260,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078613,"byte_end":9078628,"line_start":1277,"line_end":1277,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078238,"byte_end":9078289,"line_start":1266,"line_end":1266,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078290,"byte_end":9078297,"line_start":1267,"line_end":1267,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078298,"byte_end":9078321,"line_start":1268,"line_end":1268,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078322,"byte_end":9078373,"line_start":1269,"line_end":1269,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078374,"byte_end":9078425,"line_start":1270,"line_end":1270,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078426,"byte_end":9078471,"line_start":1271,"line_end":1271,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078472,"byte_end":9078512,"line_start":1272,"line_end":1272,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078513,"byte_end":9078520,"line_start":1273,"line_end":1273,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078521,"byte_end":9078532,"line_start":1274,"line_end":1274,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078533,"byte_end":9078550,"line_start":1275,"line_end":1275,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9079045,"byte_end":9079056,"line_start":1292,"line_end":1292,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078705,"byte_end":9078725,"line_start":1281,"line_end":1281,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078726,"byte_end":9078733,"line_start":1282,"line_end":1282,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078734,"byte_end":9078757,"line_start":1283,"line_end":1283,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078758,"byte_end":9078809,"line_start":1284,"line_end":1284,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078810,"byte_end":9078861,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078862,"byte_end":9078903,"line_start":1286,"line_end":1286,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078904,"byte_end":9078944,"line_start":1287,"line_end":1287,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078945,"byte_end":9078952,"line_start":1288,"line_end":1288,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078953,"byte_end":9078964,"line_start":1289,"line_end":1289,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9078965,"byte_end":9078982,"line_start":1290,"line_end":1290,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084355,"byte_end":9084367,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083833,"byte_end":9083873,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083874,"byte_end":9083881,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083882,"byte_end":9083905,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083906,"byte_end":9083917,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083918,"byte_end":9083995,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9083996,"byte_end":9084021,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084022,"byte_end":9084092,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084093,"byte_end":9084100,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084101,"byte_end":9084149,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084150,"byte_end":9084165,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084166,"byte_end":9084174,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084175,"byte_end":9084246,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084247,"byte_end":9084253,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084254,"byte_end":9084261,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084262,"byte_end":9084273,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084274,"byte_end":9084291,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084845,"byte_end":9084858,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084445,"byte_end":9084486,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084487,"byte_end":9084494,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084495,"byte_end":9084518,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084519,"byte_end":9084577,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084578,"byte_end":9084639,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084640,"byte_end":9084689,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084690,"byte_end":9084743,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084744,"byte_end":9084751,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084752,"byte_end":9084763,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084764,"byte_end":9084781,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085275,"byte_end":9085288,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084937,"byte_end":9084978,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084979,"byte_end":9084986,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9084987,"byte_end":9085010,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085011,"byte_end":9085049,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085050,"byte_end":9085088,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085089,"byte_end":9085138,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085139,"byte_end":9085173,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085174,"byte_end":9085181,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085182,"byte_end":9085193,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085194,"byte_end":9085211,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085704,"byte_end":9085717,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085367,"byte_end":9085408,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085409,"byte_end":9085416,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085417,"byte_end":9085440,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085441,"byte_end":9085479,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085480,"byte_end":9085520,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085521,"byte_end":9085570,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085571,"byte_end":9085602,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085603,"byte_end":9085610,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085611,"byte_end":9085622,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085623,"byte_end":9085640,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086116,"byte_end":9086125,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085796,"byte_end":9085817,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085818,"byte_end":9085825,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085826,"byte_end":9085849,"line_start":73,"line_end":73,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085850,"byte_end":9085894,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085895,"byte_end":9085940,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085941,"byte_end":9085980,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9085981,"byte_end":9086014,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086015,"byte_end":9086022,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086023,"byte_end":9086034,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086035,"byte_end":9086052,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086549,"byte_end":9086560,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086201,"byte_end":9086246,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086247,"byte_end":9086254,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086255,"byte_end":9086278,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086279,"byte_end":9086323,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086324,"byte_end":9086371,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086372,"byte_end":9086413,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086414,"byte_end":9086447,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086448,"byte_end":9086455,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086456,"byte_end":9086467,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086468,"byte_end":9086485,"line_start":95,"line_end":95,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087283,"byte_end":9087306,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086636,"byte_end":9086687,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086688,"byte_end":9086695,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086696,"byte_end":9086719,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086720,"byte_end":9086745,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086746,"byte_end":9086791,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086792,"byte_end":9086827,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086828,"byte_end":9086835,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086836,"byte_end":9086861,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086862,"byte_end":9086910,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086911,"byte_end":9086951,"line_start":110,"line_end":110,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086952,"byte_end":9086959,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9086960,"byte_end":9087019,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087020,"byte_end":9087035,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087036,"byte_end":9087044,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087045,"byte_end":9087052,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087053,"byte_end":9087105,"line_start":116,"line_end":116,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087106,"byte_end":9087149,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087150,"byte_end":9087157,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087158,"byte_end":9087164,"line_start":119,"line_end":119,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087165,"byte_end":9087172,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087173,"byte_end":9087184,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087185,"byte_end":9087202,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087203,"byte_end":9087219,"line_start":123,"line_end":123,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087841,"byte_end":9087865,"line_start":140,"line_end":140,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087385,"byte_end":9087437,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087438,"byte_end":9087445,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087446,"byte_end":9087469,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087470,"byte_end":9087538,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087539,"byte_end":9087610,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087611,"byte_end":9087671,"line_start":134,"line_end":134,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087672,"byte_end":9087739,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087740,"byte_end":9087747,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087748,"byte_end":9087759,"line_start":137,"line_end":137,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087760,"byte_end":9087777,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088554,"byte_end":9088577,"line_start":168,"line_end":168,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087945,"byte_end":9087996,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9087997,"byte_end":9088004,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088005,"byte_end":9088028,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088029,"byte_end":9088054,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088055,"byte_end":9088092,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088093,"byte_end":9088124,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088125,"byte_end":9088132,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088133,"byte_end":9088158,"line_start":151,"line_end":151,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088159,"byte_end":9088198,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088199,"byte_end":9088234,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088235,"byte_end":9088242,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088243,"byte_end":9088302,"line_start":155,"line_end":155,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088303,"byte_end":9088318,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088319,"byte_end":9088327,"line_start":157,"line_end":157,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088328,"byte_end":9088335,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088336,"byte_end":9088380,"line_start":159,"line_end":159,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088381,"byte_end":9088420,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088421,"byte_end":9088428,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088429,"byte_end":9088435,"line_start":162,"line_end":162,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088436,"byte_end":9088443,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088444,"byte_end":9088455,"line_start":164,"line_end":164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088456,"byte_end":9088473,"line_start":165,"line_end":165,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088474,"byte_end":9088490,"line_start":166,"line_end":166,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089081,"byte_end":9089105,"line_start":183,"line_end":183,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088656,"byte_end":9088708,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088709,"byte_end":9088716,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088717,"byte_end":9088740,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088741,"byte_end":9088798,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088799,"byte_end":9088860,"line_start":176,"line_end":176,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088861,"byte_end":9088921,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088922,"byte_end":9088979,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088980,"byte_end":9088987,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9088988,"byte_end":9088999,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089000,"byte_end":9089017,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089499,"byte_end":9089511,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089185,"byte_end":9089205,"line_start":187,"line_end":187,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089206,"byte_end":9089213,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089214,"byte_end":9089237,"line_start":189,"line_end":189,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089238,"byte_end":9089280,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089281,"byte_end":9089323,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089324,"byte_end":9089366,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089367,"byte_end":9089397,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089398,"byte_end":9089405,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089406,"byte_end":9089417,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089418,"byte_end":9089435,"line_start":196,"line_end":196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089901,"byte_end":9089913,"line_start":213,"line_end":213,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089587,"byte_end":9089607,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089608,"byte_end":9089615,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089616,"byte_end":9089639,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089640,"byte_end":9089678,"line_start":205,"line_end":205,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089679,"byte_end":9089717,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089718,"byte_end":9089766,"line_start":207,"line_end":207,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089767,"byte_end":9089799,"line_start":208,"line_end":208,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089800,"byte_end":9089807,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089808,"byte_end":9089819,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089820,"byte_end":9089837,"line_start":211,"line_end":211,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090312,"byte_end":9090327,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9089992,"byte_end":9090015,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090016,"byte_end":9090023,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090024,"byte_end":9090047,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090048,"byte_end":9090090,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090091,"byte_end":9090133,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090134,"byte_end":9090179,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090180,"byte_end":9090210,"line_start":223,"line_end":223,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090211,"byte_end":9090218,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090219,"byte_end":9090230,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090231,"byte_end":9090248,"line_start":226,"line_end":226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090726,"byte_end":9090741,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090406,"byte_end":9090429,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090430,"byte_end":9090437,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090438,"byte_end":9090461,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090462,"byte_end":9090500,"line_start":235,"line_end":235,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090501,"byte_end":9090539,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090540,"byte_end":9090591,"line_start":237,"line_end":237,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090592,"byte_end":9090624,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090625,"byte_end":9090632,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090633,"byte_end":9090644,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090645,"byte_end":9090662,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091407,"byte_end":9091423,"line_start":271,"line_end":271,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090823,"byte_end":9090863,"line_start":247,"line_end":247,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090864,"byte_end":9090871,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090872,"byte_end":9090895,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090896,"byte_end":9090921,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090922,"byte_end":9090959,"line_start":251,"line_end":251,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090960,"byte_end":9090991,"line_start":252,"line_end":252,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9090992,"byte_end":9090999,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091000,"byte_end":9091025,"line_start":254,"line_end":254,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091026,"byte_end":9091065,"line_start":255,"line_end":255,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091066,"byte_end":9091101,"line_start":256,"line_end":256,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091102,"byte_end":9091109,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091110,"byte_end":9091162,"line_start":258,"line_end":258,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091163,"byte_end":9091178,"line_start":259,"line_end":259,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091179,"byte_end":9091187,"line_start":260,"line_end":260,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091188,"byte_end":9091195,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091196,"byte_end":9091238,"line_start":262,"line_end":262,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091239,"byte_end":9091273,"line_start":263,"line_end":263,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091274,"byte_end":9091281,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091282,"byte_end":9091288,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091289,"byte_end":9091296,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091297,"byte_end":9091308,"line_start":267,"line_end":267,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091309,"byte_end":9091326,"line_start":268,"line_end":268,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091327,"byte_end":9091343,"line_start":269,"line_end":269,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091905,"byte_end":9091922,"line_start":286,"line_end":286,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091501,"byte_end":9091542,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091543,"byte_end":9091550,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091551,"byte_end":9091574,"line_start":277,"line_end":277,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091575,"byte_end":9091632,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091633,"byte_end":9091694,"line_start":279,"line_end":279,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091695,"byte_end":9091748,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091749,"byte_end":9091803,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091804,"byte_end":9091811,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091812,"byte_end":9091823,"line_start":283,"line_end":283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9091824,"byte_end":9091841,"line_start":284,"line_end":284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093774,"byte_end":9093797,"line_start":344,"line_end":344,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093440,"byte_end":9093486,"line_start":334,"line_end":334,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093487,"byte_end":9093494,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093495,"byte_end":9093518,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093519,"byte_end":9093561,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093562,"byte_end":9093621,"line_start":338,"line_end":338,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093622,"byte_end":9093672,"line_start":339,"line_end":339,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093673,"byte_end":9093680,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093681,"byte_end":9093692,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093693,"byte_end":9093710,"line_start":342,"line_end":342,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094192,"byte_end":9094216,"line_start":358,"line_end":358,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093859,"byte_end":9093906,"line_start":348,"line_end":348,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093907,"byte_end":9093914,"line_start":349,"line_end":349,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093915,"byte_end":9093938,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093939,"byte_end":9093981,"line_start":351,"line_end":351,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9093982,"byte_end":9094039,"line_start":352,"line_end":352,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094040,"byte_end":9094090,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094091,"byte_end":9094098,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094099,"byte_end":9094110,"line_start":355,"line_end":355,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094111,"byte_end":9094128,"line_start":356,"line_end":356,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094636,"byte_end":9094659,"line_start":372,"line_end":372,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094283,"byte_end":9094329,"line_start":362,"line_end":362,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094330,"byte_end":9094337,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094338,"byte_end":9094361,"line_start":364,"line_end":364,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094362,"byte_end":9094413,"line_start":365,"line_end":365,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094414,"byte_end":9094473,"line_start":366,"line_end":366,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094474,"byte_end":9094534,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094535,"byte_end":9094542,"line_start":368,"line_end":368,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094543,"byte_end":9094554,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094555,"byte_end":9094572,"line_start":370,"line_end":370,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095080,"byte_end":9095103,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094722,"byte_end":9094768,"line_start":376,"line_end":376,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094769,"byte_end":9094776,"line_start":377,"line_end":377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094777,"byte_end":9094800,"line_start":378,"line_end":378,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094801,"byte_end":9094852,"line_start":379,"line_end":379,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094853,"byte_end":9094909,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094910,"byte_end":9094978,"line_start":381,"line_end":381,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094979,"byte_end":9094986,"line_start":382,"line_end":382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094987,"byte_end":9094998,"line_start":383,"line_end":383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9094999,"byte_end":9095016,"line_start":384,"line_end":384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095497,"byte_end":9095521,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095169,"byte_end":9095216,"line_start":390,"line_end":390,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095217,"byte_end":9095224,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095225,"byte_end":9095248,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095249,"byte_end":9095287,"line_start":393,"line_end":393,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095288,"byte_end":9095348,"line_start":394,"line_end":394,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095349,"byte_end":9095395,"line_start":395,"line_end":395,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095396,"byte_end":9095403,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095404,"byte_end":9095415,"line_start":397,"line_end":397,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095416,"byte_end":9095433,"line_start":398,"line_end":398,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095900,"byte_end":9095923,"line_start":414,"line_end":414,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095588,"byte_end":9095634,"line_start":404,"line_end":404,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095635,"byte_end":9095642,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095643,"byte_end":9095666,"line_start":406,"line_end":406,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095667,"byte_end":9095705,"line_start":407,"line_end":407,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095706,"byte_end":9095765,"line_start":408,"line_end":408,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095766,"byte_end":9095798,"line_start":409,"line_end":409,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095799,"byte_end":9095806,"line_start":410,"line_end":410,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095807,"byte_end":9095818,"line_start":411,"line_end":411,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095819,"byte_end":9095836,"line_start":412,"line_end":412,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096554,"byte_end":9096574,"line_start":434,"line_end":434,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9095988,"byte_end":9096029,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096030,"byte_end":9096033,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096034,"byte_end":9096092,"line_start":420,"line_end":420,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096093,"byte_end":9096100,"line_start":421,"line_end":421,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096101,"byte_end":9096124,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096125,"byte_end":9096136,"line_start":423,"line_end":423,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096137,"byte_end":9096215,"line_start":424,"line_end":424,"column_start":1,"column_end":79}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096216,"byte_end":9096241,"line_start":425,"line_end":425,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096242,"byte_end":9096312,"line_start":426,"line_end":426,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096313,"byte_end":9096320,"line_start":427,"line_end":427,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096321,"byte_end":9096377,"line_start":428,"line_end":428,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096378,"byte_end":9096452,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096453,"byte_end":9096460,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096461,"byte_end":9096472,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096473,"byte_end":9096490,"line_start":432,"line_end":432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097120,"byte_end":9097141,"line_start":451,"line_end":451,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096654,"byte_end":9096696,"line_start":438,"line_end":438,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096697,"byte_end":9096700,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096701,"byte_end":9096759,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096760,"byte_end":9096767,"line_start":441,"line_end":441,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096768,"byte_end":9096791,"line_start":442,"line_end":442,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096792,"byte_end":9096850,"line_start":443,"line_end":443,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096851,"byte_end":9096912,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096913,"byte_end":9096970,"line_start":445,"line_end":445,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9096971,"byte_end":9097018,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097019,"byte_end":9097026,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097027,"byte_end":9097038,"line_start":448,"line_end":448,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097039,"byte_end":9097056,"line_start":449,"line_end":449,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097632,"byte_end":9097653,"line_start":468,"line_end":468,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097222,"byte_end":9097264,"line_start":455,"line_end":455,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097265,"byte_end":9097268,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097269,"byte_end":9097327,"line_start":457,"line_end":457,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097328,"byte_end":9097335,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097336,"byte_end":9097359,"line_start":459,"line_end":459,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097360,"byte_end":9097398,"line_start":460,"line_end":460,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097399,"byte_end":9097437,"line_start":461,"line_end":461,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097438,"byte_end":9097495,"line_start":462,"line_end":462,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097496,"byte_end":9097530,"line_start":463,"line_end":463,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097531,"byte_end":9097538,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097539,"byte_end":9097550,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097551,"byte_end":9097568,"line_start":466,"line_end":466,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098091,"byte_end":9098108,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097734,"byte_end":9097769,"line_start":472,"line_end":472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097770,"byte_end":9097773,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097774,"byte_end":9097790,"line_start":474,"line_end":474,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097791,"byte_end":9097798,"line_start":475,"line_end":475,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097799,"byte_end":9097822,"line_start":476,"line_end":476,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097823,"byte_end":9097865,"line_start":477,"line_end":477,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097866,"byte_end":9097908,"line_start":478,"line_end":478,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097909,"byte_end":9097955,"line_start":479,"line_end":479,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097956,"byte_end":9097989,"line_start":480,"line_end":480,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097990,"byte_end":9097997,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9097998,"byte_end":9098009,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098010,"byte_end":9098027,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098569,"byte_end":9098588,"line_start":502,"line_end":502,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098186,"byte_end":9098231,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098232,"byte_end":9098235,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098236,"byte_end":9098252,"line_start":491,"line_end":491,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098253,"byte_end":9098260,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098261,"byte_end":9098284,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098285,"byte_end":9098327,"line_start":494,"line_end":494,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098328,"byte_end":9098370,"line_start":495,"line_end":495,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098371,"byte_end":9098419,"line_start":496,"line_end":496,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098420,"byte_end":9098467,"line_start":497,"line_end":497,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098468,"byte_end":9098475,"line_start":498,"line_end":498,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098476,"byte_end":9098487,"line_start":499,"line_end":499,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098488,"byte_end":9098505,"line_start":500,"line_end":500,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099017,"byte_end":9099034,"line_start":519,"line_end":519,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098666,"byte_end":9098688,"line_start":506,"line_end":506,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098689,"byte_end":9098692,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098693,"byte_end":9098709,"line_start":508,"line_end":508,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098710,"byte_end":9098717,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098718,"byte_end":9098741,"line_start":510,"line_end":510,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098742,"byte_end":9098784,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098785,"byte_end":9098827,"line_start":512,"line_end":512,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098828,"byte_end":9098874,"line_start":513,"line_end":513,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098875,"byte_end":9098915,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098916,"byte_end":9098923,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098924,"byte_end":9098935,"line_start":516,"line_end":516,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9098936,"byte_end":9098953,"line_start":517,"line_end":517,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099495,"byte_end":9099514,"line_start":536,"line_end":536,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099112,"byte_end":9099157,"line_start":523,"line_end":523,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099158,"byte_end":9099161,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099162,"byte_end":9099178,"line_start":525,"line_end":525,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099179,"byte_end":9099186,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099187,"byte_end":9099210,"line_start":527,"line_end":527,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099211,"byte_end":9099253,"line_start":528,"line_end":528,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099254,"byte_end":9099296,"line_start":529,"line_end":529,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099297,"byte_end":9099345,"line_start":530,"line_end":530,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099346,"byte_end":9099393,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099394,"byte_end":9099401,"line_start":532,"line_end":532,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099402,"byte_end":9099413,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099414,"byte_end":9099431,"line_start":534,"line_end":534,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100163,"byte_end":9100183,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099592,"byte_end":9099632,"line_start":540,"line_end":540,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099633,"byte_end":9099636,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099637,"byte_end":9099695,"line_start":542,"line_end":542,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099696,"byte_end":9099703,"line_start":543,"line_end":543,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099704,"byte_end":9099727,"line_start":544,"line_end":544,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099728,"byte_end":9099739,"line_start":545,"line_end":545,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099740,"byte_end":9099822,"line_start":546,"line_end":546,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099823,"byte_end":9099848,"line_start":547,"line_end":547,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099849,"byte_end":9099919,"line_start":548,"line_end":548,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099920,"byte_end":9099927,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099928,"byte_end":9099984,"line_start":550,"line_end":550,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9099985,"byte_end":9100061,"line_start":551,"line_end":551,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100062,"byte_end":9100069,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100070,"byte_end":9100081,"line_start":553,"line_end":553,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100082,"byte_end":9100099,"line_start":554,"line_end":554,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100732,"byte_end":9100753,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100263,"byte_end":9100304,"line_start":560,"line_end":560,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100305,"byte_end":9100308,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100309,"byte_end":9100367,"line_start":562,"line_end":562,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100368,"byte_end":9100375,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100376,"byte_end":9100399,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100400,"byte_end":9100459,"line_start":565,"line_end":565,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100460,"byte_end":9100521,"line_start":566,"line_end":566,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100522,"byte_end":9100579,"line_start":567,"line_end":567,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100580,"byte_end":9100630,"line_start":568,"line_end":568,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100631,"byte_end":9100638,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100639,"byte_end":9100650,"line_start":570,"line_end":570,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100651,"byte_end":9100668,"line_start":571,"line_end":571,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101245,"byte_end":9101266,"line_start":590,"line_end":590,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100834,"byte_end":9100875,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100876,"byte_end":9100879,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100880,"byte_end":9100938,"line_start":579,"line_end":579,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100939,"byte_end":9100946,"line_start":580,"line_end":580,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100947,"byte_end":9100970,"line_start":581,"line_end":581,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9100971,"byte_end":9101011,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101012,"byte_end":9101050,"line_start":583,"line_end":583,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101051,"byte_end":9101108,"line_start":584,"line_end":584,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101109,"byte_end":9101143,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101144,"byte_end":9101151,"line_start":586,"line_end":586,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101152,"byte_end":9101163,"line_start":587,"line_end":587,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101164,"byte_end":9101181,"line_start":588,"line_end":588,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101690,"byte_end":9101707,"line_start":607,"line_end":607,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101347,"byte_end":9101368,"line_start":594,"line_end":594,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101369,"byte_end":9101372,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101373,"byte_end":9101389,"line_start":596,"line_end":596,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101390,"byte_end":9101397,"line_start":597,"line_end":597,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101398,"byte_end":9101421,"line_start":598,"line_end":598,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101422,"byte_end":9101464,"line_start":599,"line_end":599,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101465,"byte_end":9101507,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101508,"byte_end":9101554,"line_start":601,"line_end":601,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101555,"byte_end":9101588,"line_start":602,"line_end":602,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101589,"byte_end":9101596,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101597,"byte_end":9101608,"line_start":604,"line_end":604,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101609,"byte_end":9101626,"line_start":605,"line_end":605,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102167,"byte_end":9102186,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101785,"byte_end":9101829,"line_start":611,"line_end":611,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101830,"byte_end":9101833,"line_start":612,"line_end":612,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101834,"byte_end":9101850,"line_start":613,"line_end":613,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101851,"byte_end":9101858,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101859,"byte_end":9101882,"line_start":615,"line_end":615,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101883,"byte_end":9101925,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101926,"byte_end":9101968,"line_start":617,"line_end":617,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9101969,"byte_end":9102017,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102018,"byte_end":9102065,"line_start":619,"line_end":619,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102066,"byte_end":9102073,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102074,"byte_end":9102085,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102086,"byte_end":9102103,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102615,"byte_end":9102632,"line_start":641,"line_end":641,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102264,"byte_end":9102286,"line_start":628,"line_end":628,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102287,"byte_end":9102290,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102291,"byte_end":9102307,"line_start":630,"line_end":630,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102308,"byte_end":9102315,"line_start":631,"line_end":631,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102316,"byte_end":9102339,"line_start":632,"line_end":632,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102340,"byte_end":9102382,"line_start":633,"line_end":633,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102383,"byte_end":9102425,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102426,"byte_end":9102472,"line_start":635,"line_end":635,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102473,"byte_end":9102513,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102514,"byte_end":9102521,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102522,"byte_end":9102533,"line_start":638,"line_end":638,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102534,"byte_end":9102551,"line_start":639,"line_end":639,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103093,"byte_end":9103112,"line_start":658,"line_end":658,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102710,"byte_end":9102755,"line_start":645,"line_end":645,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102756,"byte_end":9102759,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102760,"byte_end":9102776,"line_start":647,"line_end":647,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102777,"byte_end":9102784,"line_start":648,"line_end":648,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102785,"byte_end":9102808,"line_start":649,"line_end":649,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102809,"byte_end":9102851,"line_start":650,"line_end":650,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102852,"byte_end":9102894,"line_start":651,"line_end":651,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102895,"byte_end":9102943,"line_start":652,"line_end":652,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102944,"byte_end":9102991,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9102992,"byte_end":9102999,"line_start":654,"line_end":654,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103000,"byte_end":9103011,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103012,"byte_end":9103029,"line_start":656,"line_end":656,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103761,"byte_end":9103781,"line_start":678,"line_end":678,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103190,"byte_end":9103230,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103231,"byte_end":9103234,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103235,"byte_end":9103293,"line_start":664,"line_end":664,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103294,"byte_end":9103301,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103302,"byte_end":9103325,"line_start":666,"line_end":666,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103326,"byte_end":9103337,"line_start":667,"line_end":667,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103338,"byte_end":9103420,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103421,"byte_end":9103446,"line_start":669,"line_end":669,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103447,"byte_end":9103517,"line_start":670,"line_end":670,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103518,"byte_end":9103525,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103526,"byte_end":9103582,"line_start":672,"line_end":672,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103583,"byte_end":9103659,"line_start":673,"line_end":673,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103660,"byte_end":9103667,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103668,"byte_end":9103679,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103680,"byte_end":9103697,"line_start":676,"line_end":676,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104326,"byte_end":9104347,"line_start":695,"line_end":695,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103861,"byte_end":9103902,"line_start":682,"line_end":682,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103903,"byte_end":9103906,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103907,"byte_end":9103965,"line_start":684,"line_end":684,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103966,"byte_end":9103973,"line_start":685,"line_end":685,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103974,"byte_end":9103997,"line_start":686,"line_end":686,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9103998,"byte_end":9104057,"line_start":687,"line_end":687,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104058,"byte_end":9104119,"line_start":688,"line_end":688,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104120,"byte_end":9104177,"line_start":689,"line_end":689,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104178,"byte_end":9104224,"line_start":690,"line_end":690,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104225,"byte_end":9104232,"line_start":691,"line_end":691,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104233,"byte_end":9104244,"line_start":692,"line_end":692,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104245,"byte_end":9104262,"line_start":693,"line_end":693,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104838,"byte_end":9104859,"line_start":712,"line_end":712,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104428,"byte_end":9104469,"line_start":699,"line_end":699,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104470,"byte_end":9104473,"line_start":700,"line_end":700,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104474,"byte_end":9104532,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104533,"byte_end":9104540,"line_start":702,"line_end":702,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104541,"byte_end":9104564,"line_start":703,"line_end":703,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104565,"byte_end":9104605,"line_start":704,"line_end":704,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104606,"byte_end":9104644,"line_start":705,"line_end":705,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104645,"byte_end":9104702,"line_start":706,"line_end":706,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104703,"byte_end":9104736,"line_start":707,"line_end":707,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104737,"byte_end":9104744,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104745,"byte_end":9104756,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104757,"byte_end":9104774,"line_start":710,"line_end":710,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105283,"byte_end":9105300,"line_start":729,"line_end":729,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104940,"byte_end":9104961,"line_start":716,"line_end":716,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104962,"byte_end":9104965,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104966,"byte_end":9104982,"line_start":718,"line_end":718,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104983,"byte_end":9104990,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9104991,"byte_end":9105014,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105015,"byte_end":9105057,"line_start":721,"line_end":721,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105058,"byte_end":9105100,"line_start":722,"line_end":722,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105101,"byte_end":9105147,"line_start":723,"line_end":723,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105148,"byte_end":9105181,"line_start":724,"line_end":724,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105182,"byte_end":9105189,"line_start":725,"line_end":725,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105190,"byte_end":9105201,"line_start":726,"line_end":726,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105202,"byte_end":9105219,"line_start":727,"line_end":727,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105759,"byte_end":9105778,"line_start":746,"line_end":746,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105378,"byte_end":9105421,"line_start":733,"line_end":733,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105422,"byte_end":9105425,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105426,"byte_end":9105442,"line_start":735,"line_end":735,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105443,"byte_end":9105450,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105451,"byte_end":9105474,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105475,"byte_end":9105517,"line_start":738,"line_end":738,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105518,"byte_end":9105560,"line_start":739,"line_end":739,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105561,"byte_end":9105609,"line_start":740,"line_end":740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105610,"byte_end":9105657,"line_start":741,"line_end":741,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105658,"byte_end":9105665,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105666,"byte_end":9105677,"line_start":743,"line_end":743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105678,"byte_end":9105695,"line_start":744,"line_end":744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106201,"byte_end":9106219,"line_start":763,"line_end":763,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105856,"byte_end":9105878,"line_start":750,"line_end":750,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105879,"byte_end":9105882,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105883,"byte_end":9105899,"line_start":752,"line_end":752,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105900,"byte_end":9105907,"line_start":753,"line_end":753,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105908,"byte_end":9105931,"line_start":754,"line_end":754,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105932,"byte_end":9105974,"line_start":755,"line_end":755,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9105975,"byte_end":9106017,"line_start":756,"line_end":756,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106018,"byte_end":9106065,"line_start":757,"line_end":757,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106066,"byte_end":9106099,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106100,"byte_end":9106107,"line_start":759,"line_end":759,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106108,"byte_end":9106119,"line_start":760,"line_end":760,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106120,"byte_end":9106137,"line_start":761,"line_end":761,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106681,"byte_end":9106701,"line_start":780,"line_end":780,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106298,"byte_end":9106342,"line_start":767,"line_end":767,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106343,"byte_end":9106346,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106347,"byte_end":9106363,"line_start":769,"line_end":769,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106364,"byte_end":9106371,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106372,"byte_end":9106395,"line_start":771,"line_end":771,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106396,"byte_end":9106438,"line_start":772,"line_end":772,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106439,"byte_end":9106481,"line_start":773,"line_end":773,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106482,"byte_end":9106531,"line_start":774,"line_end":774,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106532,"byte_end":9106579,"line_start":775,"line_end":775,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106580,"byte_end":9106587,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106588,"byte_end":9106599,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106600,"byte_end":9106617,"line_start":778,"line_end":778,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107128,"byte_end":9107146,"line_start":797,"line_end":797,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106780,"byte_end":9106805,"line_start":784,"line_end":784,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106806,"byte_end":9106809,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106810,"byte_end":9106826,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106827,"byte_end":9106834,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106835,"byte_end":9106858,"line_start":788,"line_end":788,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106859,"byte_end":9106901,"line_start":789,"line_end":789,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106902,"byte_end":9106944,"line_start":790,"line_end":790,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106945,"byte_end":9106992,"line_start":791,"line_end":791,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9106993,"byte_end":9107026,"line_start":792,"line_end":792,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107027,"byte_end":9107034,"line_start":793,"line_end":793,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107035,"byte_end":9107046,"line_start":794,"line_end":794,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107047,"byte_end":9107064,"line_start":795,"line_end":795,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107604,"byte_end":9107624,"line_start":814,"line_end":814,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107225,"byte_end":9107272,"line_start":801,"line_end":801,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107273,"byte_end":9107276,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107277,"byte_end":9107293,"line_start":803,"line_end":803,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107294,"byte_end":9107301,"line_start":804,"line_end":804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107302,"byte_end":9107325,"line_start":805,"line_end":805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107326,"byte_end":9107368,"line_start":806,"line_end":806,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107369,"byte_end":9107411,"line_start":807,"line_end":807,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107412,"byte_end":9107461,"line_start":808,"line_end":808,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107462,"byte_end":9107502,"line_start":809,"line_end":809,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107503,"byte_end":9107510,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107511,"byte_end":9107522,"line_start":811,"line_end":811,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107523,"byte_end":9107540,"line_start":812,"line_end":812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108050,"byte_end":9108068,"line_start":831,"line_end":831,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107703,"byte_end":9107727,"line_start":818,"line_end":818,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107728,"byte_end":9107731,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107732,"byte_end":9107748,"line_start":820,"line_end":820,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107749,"byte_end":9107756,"line_start":821,"line_end":821,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107757,"byte_end":9107780,"line_start":822,"line_end":822,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107781,"byte_end":9107823,"line_start":823,"line_end":823,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107824,"byte_end":9107866,"line_start":824,"line_end":824,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107867,"byte_end":9107914,"line_start":825,"line_end":825,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107915,"byte_end":9107948,"line_start":826,"line_end":826,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107949,"byte_end":9107956,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107957,"byte_end":9107968,"line_start":828,"line_end":828,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9107969,"byte_end":9107986,"line_start":829,"line_end":829,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108525,"byte_end":9108545,"line_start":848,"line_end":848,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108147,"byte_end":9108193,"line_start":835,"line_end":835,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108194,"byte_end":9108197,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108198,"byte_end":9108214,"line_start":837,"line_end":837,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108215,"byte_end":9108222,"line_start":838,"line_end":838,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108223,"byte_end":9108246,"line_start":839,"line_end":839,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108247,"byte_end":9108289,"line_start":840,"line_end":840,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108290,"byte_end":9108332,"line_start":841,"line_end":841,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108333,"byte_end":9108382,"line_start":842,"line_end":842,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108383,"byte_end":9108423,"line_start":843,"line_end":843,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108424,"byte_end":9108431,"line_start":844,"line_end":844,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108432,"byte_end":9108443,"line_start":845,"line_end":845,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108444,"byte_end":9108461,"line_start":846,"line_end":846,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108972,"byte_end":9108990,"line_start":865,"line_end":865,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108624,"byte_end":9108649,"line_start":852,"line_end":852,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108650,"byte_end":9108653,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108654,"byte_end":9108670,"line_start":854,"line_end":854,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108671,"byte_end":9108678,"line_start":855,"line_end":855,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108679,"byte_end":9108702,"line_start":856,"line_end":856,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108703,"byte_end":9108745,"line_start":857,"line_end":857,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108746,"byte_end":9108788,"line_start":858,"line_end":858,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108789,"byte_end":9108836,"line_start":859,"line_end":859,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108837,"byte_end":9108870,"line_start":860,"line_end":860,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108871,"byte_end":9108878,"line_start":861,"line_end":861,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108879,"byte_end":9108890,"line_start":862,"line_end":862,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9108891,"byte_end":9108908,"line_start":863,"line_end":863,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109455,"byte_end":9109475,"line_start":882,"line_end":882,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109069,"byte_end":9109116,"line_start":869,"line_end":869,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109117,"byte_end":9109120,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109121,"byte_end":9109137,"line_start":871,"line_end":871,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109138,"byte_end":9109145,"line_start":872,"line_end":872,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109146,"byte_end":9109169,"line_start":873,"line_end":873,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109170,"byte_end":9109212,"line_start":874,"line_end":874,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109213,"byte_end":9109255,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109256,"byte_end":9109305,"line_start":876,"line_end":876,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109306,"byte_end":9109353,"line_start":877,"line_end":877,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109354,"byte_end":9109361,"line_start":878,"line_end":878,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109362,"byte_end":9109373,"line_start":879,"line_end":879,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109374,"byte_end":9109391,"line_start":880,"line_end":880,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109901,"byte_end":9109919,"line_start":899,"line_end":899,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109554,"byte_end":9109578,"line_start":886,"line_end":886,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109579,"byte_end":9109582,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109583,"byte_end":9109599,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109600,"byte_end":9109607,"line_start":889,"line_end":889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109608,"byte_end":9109631,"line_start":890,"line_end":890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109632,"byte_end":9109674,"line_start":891,"line_end":891,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109675,"byte_end":9109717,"line_start":892,"line_end":892,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109718,"byte_end":9109765,"line_start":893,"line_end":893,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109766,"byte_end":9109799,"line_start":894,"line_end":894,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109800,"byte_end":9109807,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109808,"byte_end":9109819,"line_start":896,"line_end":896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109820,"byte_end":9109837,"line_start":897,"line_end":897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110383,"byte_end":9110403,"line_start":916,"line_end":916,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9109998,"byte_end":9110044,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110045,"byte_end":9110048,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110049,"byte_end":9110065,"line_start":905,"line_end":905,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110066,"byte_end":9110073,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110074,"byte_end":9110097,"line_start":907,"line_end":907,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110098,"byte_end":9110140,"line_start":908,"line_end":908,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110141,"byte_end":9110183,"line_start":909,"line_end":909,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110184,"byte_end":9110233,"line_start":910,"line_end":910,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110234,"byte_end":9110281,"line_start":911,"line_end":911,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110282,"byte_end":9110289,"line_start":912,"line_end":912,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110290,"byte_end":9110301,"line_start":913,"line_end":913,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110302,"byte_end":9110319,"line_start":914,"line_end":914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110860,"byte_end":9110883,"line_start":933,"line_end":933,"column_start":8,"column_end":31},"name":"cmp_ordinary_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d","value":"pub fn cmp_ordinary_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110482,"byte_end":9110527,"line_start":920,"line_end":920,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110528,"byte_end":9110531,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110532,"byte_end":9110548,"line_start":922,"line_end":922,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110549,"byte_end":9110556,"line_start":923,"line_end":923,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110557,"byte_end":9110580,"line_start":924,"line_end":924,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110581,"byte_end":9110628,"line_start":925,"line_end":925,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110629,"byte_end":9110671,"line_start":926,"line_end":926,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110672,"byte_end":9110724,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110725,"byte_end":9110758,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110759,"byte_end":9110766,"line_start":929,"line_end":929,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110767,"byte_end":9110778,"line_start":930,"line_end":930,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110779,"byte_end":9110796,"line_start":931,"line_end":931,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111373,"byte_end":9111398,"line_start":950,"line_end":950,"column_start":8,"column_end":33},"name":"cmp_ordinary_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d_s","value":"pub fn cmp_ordinary_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9110962,"byte_end":9111029,"line_start":937,"line_end":937,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111030,"byte_end":9111033,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111034,"byte_end":9111050,"line_start":939,"line_end":939,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111051,"byte_end":9111058,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111059,"byte_end":9111082,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111083,"byte_end":9111125,"line_start":942,"line_end":942,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111126,"byte_end":9111168,"line_start":943,"line_end":943,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111169,"byte_end":9111223,"line_start":944,"line_end":944,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111224,"byte_end":9111271,"line_start":945,"line_end":945,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111272,"byte_end":9111279,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111280,"byte_end":9111291,"line_start":947,"line_end":947,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111292,"byte_end":9111309,"line_start":948,"line_end":948,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111846,"byte_end":9111866,"line_start":967,"line_end":967,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111477,"byte_end":9111516,"line_start":954,"line_end":954,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111517,"byte_end":9111520,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111521,"byte_end":9111537,"line_start":956,"line_end":956,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111538,"byte_end":9111545,"line_start":957,"line_end":957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111546,"byte_end":9111569,"line_start":958,"line_end":958,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111570,"byte_end":9111617,"line_start":959,"line_end":959,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111618,"byte_end":9111660,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111661,"byte_end":9111710,"line_start":961,"line_end":961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111711,"byte_end":9111744,"line_start":962,"line_end":962,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111745,"byte_end":9111752,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111753,"byte_end":9111764,"line_start":964,"line_end":964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111765,"byte_end":9111782,"line_start":965,"line_end":965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112354,"byte_end":9112376,"line_start":984,"line_end":984,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9111947,"byte_end":9112008,"line_start":971,"line_end":971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112009,"byte_end":9112012,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112013,"byte_end":9112029,"line_start":973,"line_end":973,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112030,"byte_end":9112037,"line_start":974,"line_end":974,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112038,"byte_end":9112061,"line_start":975,"line_end":975,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112062,"byte_end":9112109,"line_start":976,"line_end":976,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112110,"byte_end":9112152,"line_start":977,"line_end":977,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112153,"byte_end":9112204,"line_start":978,"line_end":978,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112205,"byte_end":9112252,"line_start":979,"line_end":979,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112253,"byte_end":9112260,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112261,"byte_end":9112272,"line_start":981,"line_end":981,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112273,"byte_end":9112290,"line_start":982,"line_end":982,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112776,"byte_end":9112794,"line_start":1000,"line_end":1000,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112457,"byte_end":9112485,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112486,"byte_end":9112489,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112490,"byte_end":9112507,"line_start":990,"line_end":990,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112508,"byte_end":9112515,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112516,"byte_end":9112539,"line_start":992,"line_end":992,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112540,"byte_end":9112582,"line_start":993,"line_end":993,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112583,"byte_end":9112625,"line_start":994,"line_end":994,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112626,"byte_end":9112674,"line_start":995,"line_end":995,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112675,"byte_end":9112682,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112683,"byte_end":9112694,"line_start":997,"line_end":997,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112695,"byte_end":9112712,"line_start":998,"line_end":998,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113199,"byte_end":9113217,"line_start":1016,"line_end":1016,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112864,"byte_end":9112908,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112909,"byte_end":9112912,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112913,"byte_end":9112930,"line_start":1006,"line_end":1006,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112931,"byte_end":9112938,"line_start":1007,"line_end":1007,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112939,"byte_end":9112962,"line_start":1008,"line_end":1008,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9112963,"byte_end":9113005,"line_start":1009,"line_end":1009,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113006,"byte_end":9113048,"line_start":1010,"line_end":1010,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113049,"byte_end":9113097,"line_start":1011,"line_end":1011,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113098,"byte_end":9113105,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113106,"byte_end":9113117,"line_start":1013,"line_end":1013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113118,"byte_end":9113135,"line_start":1014,"line_end":1014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113610,"byte_end":9113628,"line_start":1032,"line_end":1032,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113287,"byte_end":9113319,"line_start":1020,"line_end":1020,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113320,"byte_end":9113323,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113324,"byte_end":9113341,"line_start":1022,"line_end":1022,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113342,"byte_end":9113349,"line_start":1023,"line_end":1023,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113350,"byte_end":9113373,"line_start":1024,"line_end":1024,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113374,"byte_end":9113416,"line_start":1025,"line_end":1025,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113417,"byte_end":9113459,"line_start":1026,"line_end":1026,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113460,"byte_end":9113508,"line_start":1027,"line_end":1027,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113509,"byte_end":9113516,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113517,"byte_end":9113528,"line_start":1029,"line_end":1029,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113529,"byte_end":9113546,"line_start":1030,"line_end":1030,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114030,"byte_end":9114048,"line_start":1048,"line_end":1048,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113698,"byte_end":9113739,"line_start":1036,"line_end":1036,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113740,"byte_end":9113743,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113744,"byte_end":9113761,"line_start":1038,"line_end":1038,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113762,"byte_end":9113769,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113770,"byte_end":9113793,"line_start":1040,"line_end":1040,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113794,"byte_end":9113836,"line_start":1041,"line_end":1041,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113837,"byte_end":9113879,"line_start":1042,"line_end":1042,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113880,"byte_end":9113928,"line_start":1043,"line_end":1043,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113929,"byte_end":9113936,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113937,"byte_end":9113948,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9113949,"byte_end":9113966,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114438,"byte_end":9114456,"line_start":1064,"line_end":1064,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114118,"byte_end":9114147,"line_start":1052,"line_end":1052,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114148,"byte_end":9114151,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114152,"byte_end":9114169,"line_start":1054,"line_end":1054,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114170,"byte_end":9114177,"line_start":1055,"line_end":1055,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114178,"byte_end":9114201,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114202,"byte_end":9114244,"line_start":1057,"line_end":1057,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114245,"byte_end":9114287,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114288,"byte_end":9114336,"line_start":1059,"line_end":1059,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114337,"byte_end":9114344,"line_start":1060,"line_end":1060,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114345,"byte_end":9114356,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114357,"byte_end":9114374,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114847,"byte_end":9114866,"line_start":1080,"line_end":1080,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114526,"byte_end":9114555,"line_start":1068,"line_end":1068,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114556,"byte_end":9114559,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114560,"byte_end":9114577,"line_start":1070,"line_end":1070,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114578,"byte_end":9114585,"line_start":1071,"line_end":1071,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114586,"byte_end":9114609,"line_start":1072,"line_end":1072,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114610,"byte_end":9114652,"line_start":1073,"line_end":1073,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114653,"byte_end":9114695,"line_start":1074,"line_end":1074,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114696,"byte_end":9114745,"line_start":1075,"line_end":1075,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114746,"byte_end":9114753,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114754,"byte_end":9114765,"line_start":1077,"line_end":1077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114766,"byte_end":9114783,"line_start":1078,"line_end":1078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115387,"byte_end":9115425,"line_start":1097,"line_end":1097,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114937,"byte_end":9114993,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9114994,"byte_end":9115001,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115002,"byte_end":9115025,"line_start":1086,"line_end":1086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115026,"byte_end":9115064,"line_start":1087,"line_end":1087,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115065,"byte_end":9115119,"line_start":1088,"line_end":1088,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115120,"byte_end":9115162,"line_start":1089,"line_end":1089,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115163,"byte_end":9115204,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115205,"byte_end":9115212,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115213,"byte_end":9115253,"line_start":1092,"line_end":1092,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115254,"byte_end":9115293,"line_start":1093,"line_end":1093,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115294,"byte_end":9115305,"line_start":1094,"line_end":1094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115306,"byte_end":9115323,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115938,"byte_end":9115968,"line_start":1114,"line_end":1114,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115491,"byte_end":9115543,"line_start":1101,"line_end":1101,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115544,"byte_end":9115551,"line_start":1102,"line_end":1102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115552,"byte_end":9115575,"line_start":1103,"line_end":1103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115576,"byte_end":9115614,"line_start":1104,"line_end":1104,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115615,"byte_end":9115661,"line_start":1105,"line_end":1105,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115662,"byte_end":9115713,"line_start":1106,"line_end":1106,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115714,"byte_end":9115755,"line_start":1107,"line_end":1107,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115756,"byte_end":9115763,"line_start":1108,"line_end":1108,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115764,"byte_end":9115804,"line_start":1109,"line_end":1109,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115805,"byte_end":9115844,"line_start":1110,"line_end":1110,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115845,"byte_end":9115856,"line_start":1111,"line_end":1111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9115857,"byte_end":9115874,"line_start":1112,"line_end":1112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116461,"byte_end":9116492,"line_start":1131,"line_end":1131,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116032,"byte_end":9116090,"line_start":1118,"line_end":1118,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116091,"byte_end":9116098,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116099,"byte_end":9116122,"line_start":1120,"line_end":1120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116123,"byte_end":9116165,"line_start":1121,"line_end":1121,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116166,"byte_end":9116213,"line_start":1122,"line_end":1122,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116214,"byte_end":9116245,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116246,"byte_end":9116278,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116279,"byte_end":9116286,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116287,"byte_end":9116327,"line_start":1126,"line_end":1126,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116328,"byte_end":9116367,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116368,"byte_end":9116379,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116380,"byte_end":9116397,"line_start":1129,"line_end":1129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116987,"byte_end":9117013,"line_start":1147,"line_end":1147,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116558,"byte_end":9116616,"line_start":1135,"line_end":1135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116617,"byte_end":9116624,"line_start":1136,"line_end":1136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116625,"byte_end":9116648,"line_start":1137,"line_end":1137,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116649,"byte_end":9116691,"line_start":1138,"line_end":1138,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116692,"byte_end":9116734,"line_start":1139,"line_end":1139,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116735,"byte_end":9116807,"line_start":1140,"line_end":1140,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116808,"byte_end":9116815,"line_start":1141,"line_end":1141,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116816,"byte_end":9116853,"line_start":1142,"line_end":1142,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116854,"byte_end":9116893,"line_start":1143,"line_end":1143,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116894,"byte_end":9116905,"line_start":1144,"line_end":1144,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9116906,"byte_end":9116923,"line_start":1145,"line_end":1145,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117495,"byte_end":9117525,"line_start":1164,"line_end":1164,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117074,"byte_end":9117116,"line_start":1151,"line_end":1151,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117117,"byte_end":9117124,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117125,"byte_end":9117148,"line_start":1153,"line_end":1153,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117149,"byte_end":9117200,"line_start":1154,"line_end":1154,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117201,"byte_end":9117247,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117248,"byte_end":9117279,"line_start":1156,"line_end":1156,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117280,"byte_end":9117312,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117313,"byte_end":9117320,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117321,"byte_end":9117361,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117362,"byte_end":9117401,"line_start":1160,"line_end":1160,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117402,"byte_end":9117413,"line_start":1161,"line_end":1161,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117414,"byte_end":9117431,"line_start":1162,"line_end":1162,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118029,"byte_end":9118062,"line_start":1180,"line_end":1180,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117590,"byte_end":9117648,"line_start":1168,"line_end":1168,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117649,"byte_end":9117656,"line_start":1169,"line_end":1169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117657,"byte_end":9117680,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117681,"byte_end":9117732,"line_start":1171,"line_end":1171,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117733,"byte_end":9117782,"line_start":1172,"line_end":1172,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117783,"byte_end":9117849,"line_start":1173,"line_end":1173,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117850,"byte_end":9117857,"line_start":1174,"line_end":1174,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117858,"byte_end":9117895,"line_start":1175,"line_end":1175,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117896,"byte_end":9117935,"line_start":1176,"line_end":1176,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117936,"byte_end":9117947,"line_start":1177,"line_end":1177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9117948,"byte_end":9117965,"line_start":1178,"line_end":1178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118408,"byte_end":9118428,"line_start":1194,"line_end":1194,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118124,"byte_end":9118166,"line_start":1184,"line_end":1184,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118167,"byte_end":9118174,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118175,"byte_end":9118198,"line_start":1186,"line_end":1186,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118199,"byte_end":9118241,"line_start":1187,"line_end":1187,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118242,"byte_end":9118278,"line_start":1188,"line_end":1188,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118279,"byte_end":9118306,"line_start":1189,"line_end":1189,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118307,"byte_end":9118314,"line_start":1190,"line_end":1190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118315,"byte_end":9118326,"line_start":1191,"line_end":1191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118327,"byte_end":9118344,"line_start":1192,"line_end":1192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118769,"byte_end":9118789,"line_start":1208,"line_end":1208,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118483,"byte_end":9118529,"line_start":1198,"line_end":1198,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118530,"byte_end":9118537,"line_start":1199,"line_end":1199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118538,"byte_end":9118561,"line_start":1200,"line_end":1200,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118562,"byte_end":9118604,"line_start":1201,"line_end":1201,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118605,"byte_end":9118641,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118642,"byte_end":9118667,"line_start":1203,"line_end":1203,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118668,"byte_end":9118675,"line_start":1204,"line_end":1204,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118676,"byte_end":9118687,"line_start":1205,"line_end":1205,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118688,"byte_end":9118705,"line_start":1206,"line_end":1206,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119162,"byte_end":9119182,"line_start":1223,"line_end":1223,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118845,"byte_end":9118891,"line_start":1212,"line_end":1212,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118892,"byte_end":9118899,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118900,"byte_end":9118923,"line_start":1214,"line_end":1214,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118924,"byte_end":9118966,"line_start":1215,"line_end":1215,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9118967,"byte_end":9119003,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119004,"byte_end":9119029,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119030,"byte_end":9119037,"line_start":1218,"line_end":1218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119038,"byte_end":9119049,"line_start":1219,"line_end":1219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119050,"byte_end":9119067,"line_start":1220,"line_end":1220,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119068,"byte_end":9119098,"line_start":1221,"line_end":1221,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119753,"byte_end":9119783,"line_start":1241,"line_end":1241,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119238,"byte_end":9119313,"line_start":1227,"line_end":1227,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119314,"byte_end":9119321,"line_start":1228,"line_end":1228,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119322,"byte_end":9119345,"line_start":1229,"line_end":1229,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119346,"byte_end":9119397,"line_start":1230,"line_end":1230,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119398,"byte_end":9119440,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119441,"byte_end":9119490,"line_start":1232,"line_end":1232,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119491,"byte_end":9119542,"line_start":1233,"line_end":1233,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119543,"byte_end":9119550,"line_start":1234,"line_end":1234,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119551,"byte_end":9119588,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119589,"byte_end":9119628,"line_start":1236,"line_end":1236,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119629,"byte_end":9119640,"line_start":1237,"line_end":1237,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119641,"byte_end":9119658,"line_start":1238,"line_end":1238,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119659,"byte_end":9119689,"line_start":1239,"line_end":1239,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120140,"byte_end":9120160,"line_start":1255,"line_end":1255,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119858,"byte_end":9119904,"line_start":1245,"line_end":1245,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119905,"byte_end":9119912,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119913,"byte_end":9119936,"line_start":1247,"line_end":1247,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119937,"byte_end":9119975,"line_start":1248,"line_end":1248,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9119976,"byte_end":9120012,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120013,"byte_end":9120038,"line_start":1250,"line_end":1250,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120039,"byte_end":9120046,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120047,"byte_end":9120058,"line_start":1252,"line_end":1252,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120059,"byte_end":9120076,"line_start":1253,"line_end":1253,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120530,"byte_end":9120550,"line_start":1270,"line_end":1270,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120219,"byte_end":9120265,"line_start":1259,"line_end":1259,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120266,"byte_end":9120273,"line_start":1260,"line_end":1260,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120274,"byte_end":9120297,"line_start":1261,"line_end":1261,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120298,"byte_end":9120334,"line_start":1262,"line_end":1262,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120335,"byte_end":9120371,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120372,"byte_end":9120397,"line_start":1264,"line_end":1264,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120398,"byte_end":9120405,"line_start":1265,"line_end":1265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120406,"byte_end":9120417,"line_start":1266,"line_end":1266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120418,"byte_end":9120435,"line_start":1267,"line_end":1267,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120436,"byte_end":9120466,"line_start":1268,"line_end":1268,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121024,"byte_end":9121051,"line_start":1286,"line_end":1286,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120609,"byte_end":9120674,"line_start":1274,"line_end":1274,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120675,"byte_end":9120682,"line_start":1275,"line_end":1275,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120683,"byte_end":9120706,"line_start":1276,"line_end":1276,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120707,"byte_end":9120749,"line_start":1277,"line_end":1277,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120750,"byte_end":9120800,"line_start":1278,"line_end":1278,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120801,"byte_end":9120842,"line_start":1279,"line_end":1279,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120843,"byte_end":9120850,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120851,"byte_end":9120890,"line_start":1281,"line_end":1281,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120891,"byte_end":9120930,"line_start":1282,"line_end":1282,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120931,"byte_end":9120942,"line_start":1283,"line_end":1283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9120943,"byte_end":9120960,"line_start":1284,"line_end":1284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121465,"byte_end":9121480,"line_start":1300,"line_end":1300,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121127,"byte_end":9121200,"line_start":1290,"line_end":1290,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121201,"byte_end":9121208,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121209,"byte_end":9121232,"line_start":1292,"line_end":1292,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121233,"byte_end":9121285,"line_start":1293,"line_end":1293,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121286,"byte_end":9121341,"line_start":1294,"line_end":1294,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121342,"byte_end":9121363,"line_start":1295,"line_end":1295,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121364,"byte_end":9121371,"line_start":1296,"line_end":1296,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121372,"byte_end":9121383,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121384,"byte_end":9121401,"line_start":1298,"line_end":1298,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121990,"byte_end":9122017,"line_start":1317,"line_end":1317,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121544,"byte_end":9121609,"line_start":1304,"line_end":1304,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121610,"byte_end":9121617,"line_start":1305,"line_end":1305,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121618,"byte_end":9121641,"line_start":1306,"line_end":1306,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121642,"byte_end":9121684,"line_start":1307,"line_end":1307,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121685,"byte_end":9121735,"line_start":1308,"line_end":1308,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121736,"byte_end":9121777,"line_start":1309,"line_end":1309,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121778,"byte_end":9121785,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121786,"byte_end":9121825,"line_start":1311,"line_end":1311,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121826,"byte_end":9121865,"line_start":1312,"line_end":1312,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121866,"byte_end":9121877,"line_start":1313,"line_end":1313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121878,"byte_end":9121895,"line_start":1314,"line_end":1314,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9121896,"byte_end":9121926,"line_start":1315,"line_end":1315,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122460,"byte_end":9122475,"line_start":1332,"line_end":1332,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122093,"byte_end":9122166,"line_start":1321,"line_end":1321,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122167,"byte_end":9122174,"line_start":1322,"line_end":1322,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122175,"byte_end":9122198,"line_start":1323,"line_end":1323,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122199,"byte_end":9122251,"line_start":1324,"line_end":1324,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122252,"byte_end":9122305,"line_start":1325,"line_end":1325,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122306,"byte_end":9122327,"line_start":1326,"line_end":1326,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122328,"byte_end":9122335,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122336,"byte_end":9122347,"line_start":1328,"line_end":1328,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122348,"byte_end":9122365,"line_start":1329,"line_end":1329,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122366,"byte_end":9122396,"line_start":1330,"line_end":1330,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123013,"byte_end":9123043,"line_start":1349,"line_end":1349,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122539,"byte_end":9122614,"line_start":1336,"line_end":1336,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122615,"byte_end":9122622,"line_start":1337,"line_end":1337,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122623,"byte_end":9122646,"line_start":1338,"line_end":1338,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122647,"byte_end":9122689,"line_start":1339,"line_end":1339,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122690,"byte_end":9122741,"line_start":1340,"line_end":1340,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122742,"byte_end":9122791,"line_start":1341,"line_end":1341,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122792,"byte_end":9122833,"line_start":1342,"line_end":1342,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122834,"byte_end":9122841,"line_start":1343,"line_end":1343,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122842,"byte_end":9122879,"line_start":1344,"line_end":1344,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122880,"byte_end":9122919,"line_start":1345,"line_end":1345,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122920,"byte_end":9122931,"line_start":1346,"line_end":1346,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9122932,"byte_end":9122949,"line_start":1347,"line_end":1347,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123464,"byte_end":9123487,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123120,"byte_end":9123196,"line_start":1353,"line_end":1353,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123197,"byte_end":9123204,"line_start":1354,"line_end":1354,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123205,"byte_end":9123228,"line_start":1355,"line_end":1355,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123229,"byte_end":9123271,"line_start":1356,"line_end":1356,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123272,"byte_end":9123311,"line_start":1357,"line_end":1357,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123312,"byte_end":9123362,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123363,"byte_end":9123370,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123371,"byte_end":9123382,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123383,"byte_end":9123400,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123874,"byte_end":9123896,"line_start":1377,"line_end":1377,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123554,"byte_end":9123598,"line_start":1367,"line_end":1367,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123599,"byte_end":9123606,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123607,"byte_end":9123630,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123631,"byte_end":9123682,"line_start":1370,"line_end":1370,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123683,"byte_end":9123721,"line_start":1371,"line_end":1371,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123722,"byte_end":9123772,"line_start":1372,"line_end":1372,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123773,"byte_end":9123780,"line_start":1373,"line_end":1373,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123781,"byte_end":9123792,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123793,"byte_end":9123810,"line_start":1375,"line_end":1375,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124232,"byte_end":9124255,"line_start":1390,"line_end":1390,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9123962,"byte_end":9124004,"line_start":1381,"line_end":1381,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124005,"byte_end":9124012,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124013,"byte_end":9124036,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124037,"byte_end":9124079,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124080,"byte_end":9124130,"line_start":1385,"line_end":1385,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124131,"byte_end":9124138,"line_start":1386,"line_end":1386,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124139,"byte_end":9124150,"line_start":1387,"line_end":1387,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124151,"byte_end":9124168,"line_start":1388,"line_end":1388,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124613,"byte_end":9124636,"line_start":1404,"line_end":1404,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124312,"byte_end":9124354,"line_start":1394,"line_end":1394,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124355,"byte_end":9124362,"line_start":1395,"line_end":1395,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124363,"byte_end":9124386,"line_start":1396,"line_end":1396,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124387,"byte_end":9124429,"line_start":1397,"line_end":1397,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124430,"byte_end":9124480,"line_start":1398,"line_end":1398,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124481,"byte_end":9124488,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124489,"byte_end":9124500,"line_start":1400,"line_end":1400,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124501,"byte_end":9124518,"line_start":1401,"line_end":1401,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124519,"byte_end":9124549,"line_start":1402,"line_end":1402,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125012,"byte_end":9125021,"line_start":1419,"line_end":1419,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124693,"byte_end":9124714,"line_start":1408,"line_end":1408,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124715,"byte_end":9124722,"line_start":1409,"line_end":1409,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124723,"byte_end":9124746,"line_start":1410,"line_end":1410,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124747,"byte_end":9124791,"line_start":1411,"line_end":1411,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124792,"byte_end":9124837,"line_start":1412,"line_end":1412,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124838,"byte_end":9124877,"line_start":1413,"line_end":1413,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124878,"byte_end":9124910,"line_start":1414,"line_end":1414,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124911,"byte_end":9124918,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124919,"byte_end":9124930,"line_start":1416,"line_end":1416,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9124931,"byte_end":9124948,"line_start":1417,"line_end":1417,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125444,"byte_end":9125455,"line_start":1434,"line_end":1434,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125097,"byte_end":9125142,"line_start":1423,"line_end":1423,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125143,"byte_end":9125150,"line_start":1424,"line_end":1424,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125151,"byte_end":9125174,"line_start":1425,"line_end":1425,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125175,"byte_end":9125219,"line_start":1426,"line_end":1426,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125220,"byte_end":9125267,"line_start":1427,"line_end":1427,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125268,"byte_end":9125309,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125310,"byte_end":9125342,"line_start":1429,"line_end":1429,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125343,"byte_end":9125350,"line_start":1430,"line_end":1430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125351,"byte_end":9125362,"line_start":1431,"line_end":1431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9125363,"byte_end":9125380,"line_start":1432,"line_end":1432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128031,"byte_end":9128041,"line_start":1510,"line_end":1510,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127742,"byte_end":9127782,"line_start":1500,"line_end":1500,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127783,"byte_end":9127790,"line_start":1501,"line_end":1501,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127791,"byte_end":9127814,"line_start":1502,"line_end":1502,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127815,"byte_end":9127859,"line_start":1503,"line_end":1503,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127860,"byte_end":9127887,"line_start":1504,"line_end":1504,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127888,"byte_end":9127929,"line_start":1505,"line_end":1505,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127930,"byte_end":9127937,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127938,"byte_end":9127949,"line_start":1507,"line_end":1507,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9127950,"byte_end":9127967,"line_start":1508,"line_end":1508,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128495,"byte_end":9128515,"line_start":1525,"line_end":1525,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128132,"byte_end":9128191,"line_start":1514,"line_end":1514,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128192,"byte_end":9128199,"line_start":1515,"line_end":1515,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128200,"byte_end":9128223,"line_start":1516,"line_end":1516,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128224,"byte_end":9128240,"line_start":1517,"line_end":1517,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128241,"byte_end":9128278,"line_start":1518,"line_end":1518,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128279,"byte_end":9128348,"line_start":1519,"line_end":1519,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128349,"byte_end":9128356,"line_start":1520,"line_end":1520,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128357,"byte_end":9128368,"line_start":1521,"line_end":1521,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128369,"byte_end":9128386,"line_start":1522,"line_end":1522,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128387,"byte_end":9128431,"line_start":1523,"line_end":1523,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128933,"byte_end":9128949,"line_start":1540,"line_end":1540,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128575,"byte_end":9128633,"line_start":1529,"line_end":1529,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128634,"byte_end":9128641,"line_start":1530,"line_end":1530,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128642,"byte_end":9128665,"line_start":1531,"line_end":1531,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128666,"byte_end":9128682,"line_start":1532,"line_end":1532,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128683,"byte_end":9128716,"line_start":1533,"line_end":1533,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128717,"byte_end":9128786,"line_start":1534,"line_end":1534,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128787,"byte_end":9128794,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128795,"byte_end":9128806,"line_start":1536,"line_end":1536,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128807,"byte_end":9128824,"line_start":1537,"line_end":1537,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9128825,"byte_end":9128869,"line_start":1538,"line_end":1538,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129307,"byte_end":9129317,"line_start":1554,"line_end":1554,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129008,"byte_end":9129048,"line_start":1544,"line_end":1544,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129049,"byte_end":9129056,"line_start":1545,"line_end":1545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129057,"byte_end":9129080,"line_start":1546,"line_end":1546,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129081,"byte_end":9129119,"line_start":1547,"line_end":1547,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129120,"byte_end":9129147,"line_start":1548,"line_end":1548,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129148,"byte_end":9129205,"line_start":1549,"line_end":1549,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129206,"byte_end":9129213,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129214,"byte_end":9129225,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129226,"byte_end":9129243,"line_start":1552,"line_end":1552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129764,"byte_end":9129787,"line_start":1569,"line_end":1569,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129415,"byte_end":9129480,"line_start":1558,"line_end":1558,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129481,"byte_end":9129488,"line_start":1559,"line_end":1559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129489,"byte_end":9129512,"line_start":1560,"line_end":1560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129513,"byte_end":9129549,"line_start":1561,"line_end":1561,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129550,"byte_end":9129571,"line_start":1562,"line_end":1562,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129572,"byte_end":9129620,"line_start":1563,"line_end":1563,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129621,"byte_end":9129662,"line_start":1564,"line_end":1564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129663,"byte_end":9129670,"line_start":1565,"line_end":1565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129671,"byte_end":9129682,"line_start":1566,"line_end":1566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129683,"byte_end":9129700,"line_start":1567,"line_end":1567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130156,"byte_end":9130172,"line_start":1583,"line_end":1583,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129862,"byte_end":9129902,"line_start":1573,"line_end":1573,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129903,"byte_end":9129910,"line_start":1574,"line_end":1574,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129911,"byte_end":9129934,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129935,"byte_end":9129971,"line_start":1576,"line_end":1576,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9129972,"byte_end":9130005,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130006,"byte_end":9130054,"line_start":1578,"line_end":1578,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130055,"byte_end":9130062,"line_start":1579,"line_end":1579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130063,"byte_end":9130074,"line_start":1580,"line_end":1580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130075,"byte_end":9130092,"line_start":1581,"line_end":1581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130618,"byte_end":9130640,"line_start":1598,"line_end":1598,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130271,"byte_end":9130335,"line_start":1587,"line_end":1587,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130336,"byte_end":9130343,"line_start":1588,"line_end":1588,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130344,"byte_end":9130367,"line_start":1589,"line_end":1589,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130368,"byte_end":9130404,"line_start":1590,"line_end":1590,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130405,"byte_end":9130426,"line_start":1591,"line_end":1591,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130427,"byte_end":9130474,"line_start":1592,"line_end":1592,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130475,"byte_end":9130516,"line_start":1593,"line_end":1593,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130517,"byte_end":9130524,"line_start":1594,"line_end":1594,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130525,"byte_end":9130536,"line_start":1595,"line_end":1595,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130537,"byte_end":9130554,"line_start":1596,"line_end":1596,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131062,"byte_end":9131080,"line_start":1612,"line_end":1612,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130715,"byte_end":9130775,"line_start":1602,"line_end":1602,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130776,"byte_end":9130783,"line_start":1603,"line_end":1603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130784,"byte_end":9130807,"line_start":1604,"line_end":1604,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130808,"byte_end":9130852,"line_start":1605,"line_end":1605,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130853,"byte_end":9130888,"line_start":1606,"line_end":1606,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130889,"byte_end":9130960,"line_start":1607,"line_end":1607,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130961,"byte_end":9130968,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130969,"byte_end":9130980,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9130981,"byte_end":9130998,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131648,"byte_end":9131668,"line_start":1630,"line_end":1630,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131172,"byte_end":9131212,"line_start":1616,"line_end":1616,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131213,"byte_end":9131216,"line_start":1617,"line_end":1617,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131217,"byte_end":9131295,"line_start":1618,"line_end":1618,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131296,"byte_end":9131376,"line_start":1619,"line_end":1619,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131377,"byte_end":9131389,"line_start":1620,"line_end":1620,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131390,"byte_end":9131397,"line_start":1621,"line_end":1621,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131398,"byte_end":9131421,"line_start":1622,"line_end":1622,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131422,"byte_end":9131447,"line_start":1623,"line_end":1623,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131448,"byte_end":9131485,"line_start":1624,"line_end":1624,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131486,"byte_end":9131546,"line_start":1625,"line_end":1625,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131547,"byte_end":9131554,"line_start":1626,"line_end":1626,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131555,"byte_end":9131566,"line_start":1627,"line_end":1627,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131567,"byte_end":9131584,"line_start":1628,"line_end":1628,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132294,"byte_end":9132314,"line_start":1649,"line_end":1649,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131766,"byte_end":9131806,"line_start":1634,"line_end":1634,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131807,"byte_end":9131810,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131811,"byte_end":9131889,"line_start":1636,"line_end":1636,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131890,"byte_end":9131963,"line_start":1637,"line_end":1637,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131964,"byte_end":9131976,"line_start":1638,"line_end":1638,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131977,"byte_end":9131984,"line_start":1639,"line_end":1639,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9131985,"byte_end":9132008,"line_start":1640,"line_end":1640,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132009,"byte_end":9132077,"line_start":1641,"line_end":1641,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132078,"byte_end":9132115,"line_start":1642,"line_end":1642,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132116,"byte_end":9132155,"line_start":1643,"line_end":1643,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132156,"byte_end":9132163,"line_start":1644,"line_end":1644,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132164,"byte_end":9132175,"line_start":1645,"line_end":1645,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132176,"byte_end":9132193,"line_start":1646,"line_end":1646,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132194,"byte_end":9132230,"line_start":1647,"line_end":1647,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132895,"byte_end":9132923,"line_start":1665,"line_end":1665,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132419,"byte_end":9132497,"line_start":1653,"line_end":1653,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132498,"byte_end":9132537,"line_start":1654,"line_end":1654,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132538,"byte_end":9132545,"line_start":1655,"line_end":1655,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132546,"byte_end":9132569,"line_start":1656,"line_end":1656,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132570,"byte_end":9132628,"line_start":1657,"line_end":1657,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132629,"byte_end":9132690,"line_start":1658,"line_end":1658,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132691,"byte_end":9132755,"line_start":1659,"line_end":1659,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132756,"byte_end":9132793,"line_start":1660,"line_end":1660,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132794,"byte_end":9132801,"line_start":1661,"line_end":1661,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132802,"byte_end":9132813,"line_start":1662,"line_end":1662,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9132814,"byte_end":9132831,"line_start":1663,"line_end":1663,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133504,"byte_end":9133516,"line_start":1683,"line_end":1683,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,\n ]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133003,"byte_end":9133047,"line_start":1669,"line_end":1669,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133048,"byte_end":9133055,"line_start":1670,"line_end":1670,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133056,"byte_end":9133079,"line_start":1671,"line_end":1671,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133080,"byte_end":9133091,"line_start":1672,"line_end":1672,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133092,"byte_end":9133169,"line_start":1673,"line_end":1673,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133170,"byte_end":9133195,"line_start":1674,"line_end":1674,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133196,"byte_end":9133264,"line_start":1675,"line_end":1675,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133265,"byte_end":9133272,"line_start":1676,"line_end":1676,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133273,"byte_end":9133321,"line_start":1677,"line_end":1677,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133322,"byte_end":9133402,"line_start":1678,"line_end":1678,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133403,"byte_end":9133410,"line_start":1679,"line_end":1679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133411,"byte_end":9133422,"line_start":1680,"line_end":1680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133423,"byte_end":9133440,"line_start":1681,"line_end":1681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133997,"byte_end":9134010,"line_start":1698,"line_end":1698,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133594,"byte_end":9133639,"line_start":1687,"line_end":1687,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133640,"byte_end":9133647,"line_start":1688,"line_end":1688,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133648,"byte_end":9133671,"line_start":1689,"line_end":1689,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133672,"byte_end":9133730,"line_start":1690,"line_end":1690,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133731,"byte_end":9133792,"line_start":1691,"line_end":1691,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133793,"byte_end":9133842,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133843,"byte_end":9133895,"line_start":1693,"line_end":1693,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133896,"byte_end":9133903,"line_start":1694,"line_end":1694,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133904,"byte_end":9133915,"line_start":1695,"line_end":1695,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9133916,"byte_end":9133933,"line_start":1696,"line_end":1696,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134405,"byte_end":9134414,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134089,"byte_end":9134114,"line_start":1702,"line_end":1702,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134115,"byte_end":9134122,"line_start":1703,"line_end":1703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134123,"byte_end":9134146,"line_start":1704,"line_end":1704,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134147,"byte_end":9134189,"line_start":1705,"line_end":1705,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134190,"byte_end":9134232,"line_start":1706,"line_end":1706,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134233,"byte_end":9134272,"line_start":1707,"line_end":1707,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134273,"byte_end":9134303,"line_start":1708,"line_end":1708,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134304,"byte_end":9134311,"line_start":1709,"line_end":1709,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134312,"byte_end":9134323,"line_start":1710,"line_end":1710,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134324,"byte_end":9134341,"line_start":1711,"line_end":1711,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134833,"byte_end":9134844,"line_start":1728,"line_end":1728,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134490,"byte_end":9134538,"line_start":1717,"line_end":1717,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134539,"byte_end":9134546,"line_start":1718,"line_end":1718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134547,"byte_end":9134570,"line_start":1719,"line_end":1719,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134571,"byte_end":9134614,"line_start":1720,"line_end":1720,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134615,"byte_end":9134657,"line_start":1721,"line_end":1721,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134658,"byte_end":9134699,"line_start":1722,"line_end":1722,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134700,"byte_end":9134731,"line_start":1723,"line_end":1723,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134732,"byte_end":9134739,"line_start":1724,"line_end":1724,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134740,"byte_end":9134751,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134752,"byte_end":9134769,"line_start":1726,"line_end":1726,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135403,"byte_end":9135415,"line_start":1745,"line_end":1745,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b =\n   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134920,"byte_end":9134964,"line_start":1732,"line_end":1732,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134965,"byte_end":9134972,"line_start":1733,"line_end":1733,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134973,"byte_end":9134996,"line_start":1734,"line_end":1734,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9134997,"byte_end":9135008,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135009,"byte_end":9135086,"line_start":1736,"line_end":1736,"column_start":1,"column_end":78}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135087,"byte_end":9135098,"line_start":1737,"line_end":1737,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135099,"byte_end":9135177,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135178,"byte_end":9135226,"line_start":1739,"line_end":1739,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135227,"byte_end":9135301,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135302,"byte_end":9135309,"line_start":1741,"line_end":1741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135310,"byte_end":9135321,"line_start":1742,"line_end":1742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135322,"byte_end":9135339,"line_start":1743,"line_end":1743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135899,"byte_end":9135912,"line_start":1760,"line_end":1760,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135493,"byte_end":9135538,"line_start":1749,"line_end":1749,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135539,"byte_end":9135546,"line_start":1750,"line_end":1750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135547,"byte_end":9135570,"line_start":1751,"line_end":1751,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135571,"byte_end":9135629,"line_start":1752,"line_end":1752,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135630,"byte_end":9135691,"line_start":1753,"line_end":1753,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135692,"byte_end":9135741,"line_start":1754,"line_end":1754,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135742,"byte_end":9135797,"line_start":1755,"line_end":1755,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135798,"byte_end":9135805,"line_start":1756,"line_end":1756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135806,"byte_end":9135817,"line_start":1757,"line_end":1757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135818,"byte_end":9135835,"line_start":1758,"line_end":1758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136308,"byte_end":9136317,"line_start":1775,"line_end":1775,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9135991,"byte_end":9136016,"line_start":1764,"line_end":1764,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136017,"byte_end":9136024,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136025,"byte_end":9136048,"line_start":1766,"line_end":1766,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136049,"byte_end":9136092,"line_start":1767,"line_end":1767,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136093,"byte_end":9136135,"line_start":1768,"line_end":1768,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136136,"byte_end":9136175,"line_start":1769,"line_end":1769,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136176,"byte_end":9136206,"line_start":1770,"line_end":1770,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136207,"byte_end":9136214,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136215,"byte_end":9136226,"line_start":1772,"line_end":1772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136227,"byte_end":9136244,"line_start":1773,"line_end":1773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136736,"byte_end":9136747,"line_start":1790,"line_end":1790,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136393,"byte_end":9136441,"line_start":1779,"line_end":1779,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136442,"byte_end":9136449,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136450,"byte_end":9136473,"line_start":1781,"line_end":1781,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136474,"byte_end":9136517,"line_start":1782,"line_end":1782,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136518,"byte_end":9136560,"line_start":1783,"line_end":1783,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136561,"byte_end":9136602,"line_start":1784,"line_end":1784,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136603,"byte_end":9136634,"line_start":1785,"line_end":1785,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136635,"byte_end":9136642,"line_start":1786,"line_end":1786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136643,"byte_end":9136654,"line_start":1787,"line_end":1787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136655,"byte_end":9136672,"line_start":1788,"line_end":1788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137132,"byte_end":9137148,"line_start":1804,"line_end":1804,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136823,"byte_end":9136883,"line_start":1794,"line_end":1794,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136884,"byte_end":9136891,"line_start":1795,"line_end":1795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136892,"byte_end":9136915,"line_start":1796,"line_end":1796,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136916,"byte_end":9136952,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136953,"byte_end":9136985,"line_start":1798,"line_end":1798,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9136986,"byte_end":9137030,"line_start":1799,"line_end":1799,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137031,"byte_end":9137038,"line_start":1800,"line_end":1800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137039,"byte_end":9137050,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137051,"byte_end":9137068,"line_start":1802,"line_end":1802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137583,"byte_end":9137609,"line_start":1819,"line_end":1819,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137213,"byte_end":9137287,"line_start":1808,"line_end":1808,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137288,"byte_end":9137295,"line_start":1809,"line_end":1809,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137296,"byte_end":9137319,"line_start":1810,"line_end":1810,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137320,"byte_end":9137356,"line_start":1811,"line_end":1811,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137357,"byte_end":9137393,"line_start":1812,"line_end":1812,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137394,"byte_end":9137439,"line_start":1813,"line_end":1813,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137440,"byte_end":9137481,"line_start":1814,"line_end":1814,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137482,"byte_end":9137489,"line_start":1815,"line_end":1815,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137490,"byte_end":9137501,"line_start":1816,"line_end":1816,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137502,"byte_end":9137519,"line_start":1817,"line_end":1817,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138113,"byte_end":9138131,"line_start":1837,"line_end":1837,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137686,"byte_end":9137729,"line_start":1823,"line_end":1823,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137730,"byte_end":9137733,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137734,"byte_end":9137797,"line_start":1825,"line_end":1825,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137798,"byte_end":9137805,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137806,"byte_end":9137829,"line_start":1827,"line_end":1827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137830,"byte_end":9137855,"line_start":1828,"line_end":1828,"column_start":1,"column_end":26}},{"value":"/   0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137856,"byte_end":9137929,"line_start":1829,"line_end":1829,"column_start":1,"column_end":74}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137930,"byte_end":9137937,"line_start":1830,"line_end":1830,"column_start":1,"column_end":8}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137938,"byte_end":9137972,"line_start":1831,"line_end":1831,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9137973,"byte_end":9138011,"line_start":1832,"line_end":1832,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138012,"byte_end":9138019,"line_start":1833,"line_end":1833,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138020,"byte_end":9138031,"line_start":1834,"line_end":1834,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138032,"byte_end":9138049,"line_start":1835,"line_end":1835,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138521,"byte_end":9138536,"line_start":1853,"line_end":1853,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138190,"byte_end":9138228,"line_start":1841,"line_end":1841,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138229,"byte_end":9138232,"line_start":1842,"line_end":1842,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138233,"byte_end":9138285,"line_start":1843,"line_end":1843,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138286,"byte_end":9138293,"line_start":1844,"line_end":1844,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138294,"byte_end":9138317,"line_start":1845,"line_end":1845,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138318,"byte_end":9138362,"line_start":1846,"line_end":1846,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138363,"byte_end":9138394,"line_start":1847,"line_end":1847,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138395,"byte_end":9138419,"line_start":1848,"line_end":1848,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138420,"byte_end":9138427,"line_start":1849,"line_end":1849,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138428,"byte_end":9138439,"line_start":1850,"line_end":1850,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138440,"byte_end":9138457,"line_start":1851,"line_end":1851,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139023,"byte_end":9139046,"line_start":1869,"line_end":1869,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138593,"byte_end":9138666,"line_start":1857,"line_end":1857,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138667,"byte_end":9138670,"line_start":1858,"line_end":1858,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138671,"byte_end":9138678,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138679,"byte_end":9138702,"line_start":1860,"line_end":1860,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138703,"byte_end":9138748,"line_start":1861,"line_end":1861,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138749,"byte_end":9138794,"line_start":1862,"line_end":1862,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138795,"byte_end":9138854,"line_start":1863,"line_end":1863,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138855,"byte_end":9138921,"line_start":1864,"line_end":1864,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138922,"byte_end":9138929,"line_start":1865,"line_end":1865,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138930,"byte_end":9138941,"line_start":1866,"line_end":1866,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9138942,"byte_end":9138959,"line_start":1867,"line_end":1867,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139448,"byte_end":9139457,"line_start":1884,"line_end":1884,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139125,"byte_end":9139146,"line_start":1873,"line_end":1873,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139147,"byte_end":9139154,"line_start":1874,"line_end":1874,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139155,"byte_end":9139178,"line_start":1875,"line_end":1875,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139179,"byte_end":9139223,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139224,"byte_end":9139269,"line_start":1877,"line_end":1877,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139270,"byte_end":9139309,"line_start":1878,"line_end":1878,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139310,"byte_end":9139346,"line_start":1879,"line_end":1879,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139347,"byte_end":9139354,"line_start":1880,"line_end":1880,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139355,"byte_end":9139366,"line_start":1881,"line_end":1881,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139367,"byte_end":9139384,"line_start":1882,"line_end":1882,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139882,"byte_end":9139893,"line_start":1899,"line_end":1899,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139533,"byte_end":9139578,"line_start":1888,"line_end":1888,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139579,"byte_end":9139586,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139587,"byte_end":9139610,"line_start":1890,"line_end":1890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139611,"byte_end":9139655,"line_start":1891,"line_end":1891,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139656,"byte_end":9139703,"line_start":1892,"line_end":1892,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139704,"byte_end":9139745,"line_start":1893,"line_end":1893,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139746,"byte_end":9139780,"line_start":1894,"line_end":1894,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139781,"byte_end":9139788,"line_start":1895,"line_end":1895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139789,"byte_end":9139800,"line_start":1896,"line_end":1896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139801,"byte_end":9139818,"line_start":1897,"line_end":1897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140438,"byte_end":9140461,"line_start":1915,"line_end":1915,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9139969,"byte_end":9140042,"line_start":1903,"line_end":1903,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140043,"byte_end":9140061,"line_start":1904,"line_end":1904,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140062,"byte_end":9140069,"line_start":1905,"line_end":1905,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140070,"byte_end":9140093,"line_start":1906,"line_end":1906,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140094,"byte_end":9140159,"line_start":1907,"line_end":1907,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140160,"byte_end":9140228,"line_start":1908,"line_end":1908,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140229,"byte_end":9140288,"line_start":1909,"line_end":1909,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140289,"byte_end":9140336,"line_start":1910,"line_end":1910,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140337,"byte_end":9140344,"line_start":1911,"line_end":1911,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140345,"byte_end":9140356,"line_start":1912,"line_end":1912,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140357,"byte_end":9140374,"line_start":1913,"line_end":1913,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141013,"byte_end":9141036,"line_start":1931,"line_end":1931,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140542,"byte_end":9140615,"line_start":1919,"line_end":1919,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140616,"byte_end":9140634,"line_start":1920,"line_end":1920,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140635,"byte_end":9140642,"line_start":1921,"line_end":1921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140643,"byte_end":9140666,"line_start":1922,"line_end":1922,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140667,"byte_end":9140731,"line_start":1923,"line_end":1923,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140732,"byte_end":9140799,"line_start":1924,"line_end":1924,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140800,"byte_end":9140859,"line_start":1925,"line_end":1925,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140860,"byte_end":9140911,"line_start":1926,"line_end":1926,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140912,"byte_end":9140919,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140920,"byte_end":9140931,"line_start":1928,"line_end":1928,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9140932,"byte_end":9140949,"line_start":1929,"line_end":1929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141600,"byte_end":9141622,"line_start":1947,"line_end":1947,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141117,"byte_end":9141189,"line_start":1935,"line_end":1935,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141190,"byte_end":9141208,"line_start":1936,"line_end":1936,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141209,"byte_end":9141216,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141217,"byte_end":9141240,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141241,"byte_end":9141306,"line_start":1939,"line_end":1939,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141307,"byte_end":9141375,"line_start":1940,"line_end":1940,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141376,"byte_end":9141434,"line_start":1941,"line_end":1941,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141435,"byte_end":9141498,"line_start":1942,"line_end":1942,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141499,"byte_end":9141506,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141507,"byte_end":9141518,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141519,"byte_end":9141536,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142016,"byte_end":9142027,"line_start":1962,"line_end":1962,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141703,"byte_end":9141723,"line_start":1951,"line_end":1951,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141724,"byte_end":9141731,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141732,"byte_end":9141755,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141756,"byte_end":9141798,"line_start":1954,"line_end":1954,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141799,"byte_end":9141841,"line_start":1955,"line_end":1955,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141842,"byte_end":9141883,"line_start":1956,"line_end":1956,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141884,"byte_end":9141914,"line_start":1957,"line_end":1957,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141915,"byte_end":9141922,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141923,"byte_end":9141934,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9141935,"byte_end":9141952,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142415,"byte_end":9142426,"line_start":1977,"line_end":1977,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142102,"byte_end":9142122,"line_start":1966,"line_end":1966,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142123,"byte_end":9142130,"line_start":1967,"line_end":1967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142131,"byte_end":9142154,"line_start":1968,"line_end":1968,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142155,"byte_end":9142193,"line_start":1969,"line_end":1969,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142194,"byte_end":9142232,"line_start":1970,"line_end":1970,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142233,"byte_end":9142280,"line_start":1971,"line_end":1971,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142281,"byte_end":9142313,"line_start":1972,"line_end":1972,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142314,"byte_end":9142321,"line_start":1973,"line_end":1973,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142322,"byte_end":9142333,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142334,"byte_end":9142351,"line_start":1975,"line_end":1975,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142949,"byte_end":9142969,"line_start":1992,"line_end":1992,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142504,"byte_end":9142562,"line_start":1981,"line_end":1981,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142563,"byte_end":9142570,"line_start":1982,"line_end":1982,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142571,"byte_end":9142594,"line_start":1983,"line_end":1983,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142595,"byte_end":9142649,"line_start":1984,"line_end":1984,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142650,"byte_end":9142711,"line_start":1985,"line_end":1985,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142712,"byte_end":9142768,"line_start":1986,"line_end":1986,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142769,"byte_end":9142847,"line_start":1987,"line_end":1987,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142848,"byte_end":9142855,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142856,"byte_end":9142867,"line_start":1989,"line_end":1989,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9142868,"byte_end":9142885,"line_start":1990,"line_end":1990,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143436,"byte_end":9143457,"line_start":2007,"line_end":2007,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143050,"byte_end":9143109,"line_start":1996,"line_end":1996,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143110,"byte_end":9143117,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143118,"byte_end":9143141,"line_start":1998,"line_end":1998,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143142,"byte_end":9143184,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143185,"byte_end":9143227,"line_start":2000,"line_end":2000,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143228,"byte_end":9143285,"line_start":2001,"line_end":2001,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143286,"byte_end":9143334,"line_start":2002,"line_end":2002,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143335,"byte_end":9143342,"line_start":2003,"line_end":2003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143343,"byte_end":9143354,"line_start":2004,"line_end":2004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143355,"byte_end":9143372,"line_start":2005,"line_end":2005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144017,"byte_end":9144037,"line_start":2025,"line_end":2025,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143538,"byte_end":9143596,"line_start":2011,"line_end":2011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143597,"byte_end":9143604,"line_start":2012,"line_end":2012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143605,"byte_end":9143628,"line_start":2013,"line_end":2013,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143629,"byte_end":9143687,"line_start":2014,"line_end":2014,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143688,"byte_end":9143751,"line_start":2015,"line_end":2015,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143752,"byte_end":9143808,"line_start":2016,"line_end":2016,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143809,"byte_end":9143824,"line_start":2017,"line_end":2017,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143825,"byte_end":9143833,"line_start":2018,"line_end":2018,"column_start":1,"column_end":9}},{"value":"/   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143834,"byte_end":9143908,"line_start":2019,"line_end":2019,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143909,"byte_end":9143915,"line_start":2020,"line_end":2020,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143916,"byte_end":9143923,"line_start":2021,"line_end":2021,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143924,"byte_end":9143935,"line_start":2022,"line_end":2022,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9143936,"byte_end":9143953,"line_start":2023,"line_end":2023,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144794,"byte_end":9144818,"line_start":2048,"line_end":2048,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144119,"byte_end":9144166,"line_start":2029,"line_end":2029,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144167,"byte_end":9144170,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144171,"byte_end":9144240,"line_start":2031,"line_end":2031,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144241,"byte_end":9144291,"line_start":2032,"line_end":2032,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144292,"byte_end":9144344,"line_start":2033,"line_end":2033,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144345,"byte_end":9144352,"line_start":2034,"line_end":2034,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144353,"byte_end":9144376,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144377,"byte_end":9144402,"line_start":2036,"line_end":2036,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144403,"byte_end":9144471,"line_start":2037,"line_end":2037,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144472,"byte_end":9144479,"line_start":2038,"line_end":2038,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144480,"byte_end":9144505,"line_start":2039,"line_end":2039,"column_start":1,"column_end":26}},{"value":"/   20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144506,"byte_end":9144588,"line_start":2040,"line_end":2040,"column_start":1,"column_end":83}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144589,"byte_end":9144596,"line_start":2041,"line_end":2041,"column_start":1,"column_end":8}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144597,"byte_end":9144657,"line_start":2042,"line_end":2042,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144658,"byte_end":9144692,"line_start":2043,"line_end":2043,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144693,"byte_end":9144700,"line_start":2044,"line_end":2044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144701,"byte_end":9144712,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144713,"byte_end":9144730,"line_start":2046,"line_end":2046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145401,"byte_end":9145413,"line_start":2065,"line_end":2065,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144896,"byte_end":9144958,"line_start":2052,"line_end":2052,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144959,"byte_end":9144966,"line_start":2053,"line_end":2053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144967,"byte_end":9144990,"line_start":2054,"line_end":2054,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9144991,"byte_end":9145002,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145003,"byte_end":9145080,"line_start":2056,"line_end":2056,"column_start":1,"column_end":78}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145081,"byte_end":9145163,"line_start":2057,"line_end":2057,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145164,"byte_end":9145221,"line_start":2058,"line_end":2058,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145222,"byte_end":9145229,"line_start":2059,"line_end":2059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145230,"byte_end":9145241,"line_start":2060,"line_end":2060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145242,"byte_end":9145259,"line_start":2061,"line_end":2061,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145260,"byte_end":9145296,"line_start":2062,"line_end":2062,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145297,"byte_end":9145337,"line_start":2063,"line_end":2063,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146070,"byte_end":9146083,"line_start":2084,"line_end":2084,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145628,"byte_end":9145690,"line_start":2072,"line_end":2072,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145691,"byte_end":9145698,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145699,"byte_end":9145722,"line_start":2074,"line_end":2074,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145723,"byte_end":9145777,"line_start":2075,"line_end":2075,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145778,"byte_end":9145832,"line_start":2076,"line_end":2076,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145833,"byte_end":9145890,"line_start":2077,"line_end":2077,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145891,"byte_end":9145898,"line_start":2078,"line_end":2078,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145899,"byte_end":9145910,"line_start":2079,"line_end":2079,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145911,"byte_end":9145928,"line_start":2080,"line_end":2080,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145929,"byte_end":9145965,"line_start":2081,"line_end":2081,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9145966,"byte_end":9146006,"line_start":2082,"line_end":2082,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146557,"byte_end":9146570,"line_start":2100,"line_end":2100,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146225,"byte_end":9146287,"line_start":2090,"line_end":2090,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146288,"byte_end":9146295,"line_start":2091,"line_end":2091,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146296,"byte_end":9146319,"line_start":2092,"line_end":2092,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146320,"byte_end":9146358,"line_start":2093,"line_end":2093,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146359,"byte_end":9146397,"line_start":2094,"line_end":2094,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146398,"byte_end":9146455,"line_start":2095,"line_end":2095,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146456,"byte_end":9146463,"line_start":2096,"line_end":2096,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146464,"byte_end":9146475,"line_start":2097,"line_end":2097,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146476,"byte_end":9146493,"line_start":2098,"line_end":2098,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146987,"byte_end":9147000,"line_start":2114,"line_end":2114,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146663,"byte_end":9146725,"line_start":2104,"line_end":2104,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146726,"byte_end":9146733,"line_start":2105,"line_end":2105,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146734,"byte_end":9146757,"line_start":2106,"line_end":2106,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146758,"byte_end":9146794,"line_start":2107,"line_end":2107,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146795,"byte_end":9146827,"line_start":2108,"line_end":2108,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146828,"byte_end":9146885,"line_start":2109,"line_end":2109,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146886,"byte_end":9146893,"line_start":2110,"line_end":2110,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146894,"byte_end":9146905,"line_start":2111,"line_end":2111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9146906,"byte_end":9146923,"line_start":2112,"line_end":2112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147388,"byte_end":9147397,"line_start":2128,"line_end":2128,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147072,"byte_end":9147134,"line_start":2118,"line_end":2118,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147135,"byte_end":9147142,"line_start":2119,"line_end":2119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147143,"byte_end":9147166,"line_start":2120,"line_end":2120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147167,"byte_end":9147209,"line_start":2121,"line_end":2121,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147210,"byte_end":9147242,"line_start":2122,"line_end":2122,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147243,"byte_end":9147286,"line_start":2123,"line_end":2123,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147287,"byte_end":9147294,"line_start":2124,"line_end":2124,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147295,"byte_end":9147306,"line_start":2125,"line_end":2125,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147307,"byte_end":9147324,"line_start":2126,"line_end":2126,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147765,"byte_end":9147776,"line_start":2142,"line_end":2142,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147465,"byte_end":9147514,"line_start":2132,"line_end":2132,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147515,"byte_end":9147522,"line_start":2133,"line_end":2133,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147523,"byte_end":9147546,"line_start":2134,"line_end":2134,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147547,"byte_end":9147589,"line_start":2135,"line_end":2135,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147590,"byte_end":9147619,"line_start":2136,"line_end":2136,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147620,"byte_end":9147663,"line_start":2137,"line_end":2137,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147664,"byte_end":9147671,"line_start":2138,"line_end":2138,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147672,"byte_end":9147683,"line_start":2139,"line_end":2139,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147684,"byte_end":9147701,"line_start":2140,"line_end":2140,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148139,"byte_end":9148154,"line_start":2156,"line_end":2156,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147833,"byte_end":9147884,"line_start":2146,"line_end":2146,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147885,"byte_end":9147892,"line_start":2147,"line_end":2147,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147893,"byte_end":9147916,"line_start":2148,"line_end":2148,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147917,"byte_end":9147959,"line_start":2149,"line_end":2149,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147960,"byte_end":9147993,"line_start":2150,"line_end":2150,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9147994,"byte_end":9148037,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148038,"byte_end":9148045,"line_start":2152,"line_end":2152,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148046,"byte_end":9148057,"line_start":2153,"line_end":2153,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148058,"byte_end":9148075,"line_start":2154,"line_end":2154,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148565,"byte_end":9148583,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148212,"byte_end":9148260,"line_start":2160,"line_end":2160,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148261,"byte_end":9148268,"line_start":2161,"line_end":2161,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148269,"byte_end":9148292,"line_start":2162,"line_end":2162,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148293,"byte_end":9148370,"line_start":2163,"line_end":2163,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148371,"byte_end":9148405,"line_start":2164,"line_end":2164,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148406,"byte_end":9148463,"line_start":2165,"line_end":2165,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148464,"byte_end":9148471,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148472,"byte_end":9148483,"line_start":2167,"line_end":2167,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148484,"byte_end":9148501,"line_start":2168,"line_end":2168,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148974,"byte_end":9148993,"line_start":2184,"line_end":2184,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148642,"byte_end":9148691,"line_start":2174,"line_end":2174,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148692,"byte_end":9148699,"line_start":2175,"line_end":2175,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148700,"byte_end":9148723,"line_start":2176,"line_end":2176,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148724,"byte_end":9148778,"line_start":2177,"line_end":2177,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148779,"byte_end":9148814,"line_start":2178,"line_end":2178,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148815,"byte_end":9148872,"line_start":2179,"line_end":2179,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148873,"byte_end":9148880,"line_start":2180,"line_end":2180,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148881,"byte_end":9148892,"line_start":2181,"line_end":2181,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9148893,"byte_end":9148910,"line_start":2182,"line_end":2182,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149370,"byte_end":9149389,"line_start":2198,"line_end":2198,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149054,"byte_end":9149103,"line_start":2188,"line_end":2188,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149104,"byte_end":9149111,"line_start":2189,"line_end":2189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149112,"byte_end":9149135,"line_start":2190,"line_end":2190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149136,"byte_end":9149174,"line_start":2191,"line_end":2191,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149175,"byte_end":9149210,"line_start":2192,"line_end":2192,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149211,"byte_end":9149268,"line_start":2193,"line_end":2193,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149269,"byte_end":9149276,"line_start":2194,"line_end":2194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149277,"byte_end":9149288,"line_start":2195,"line_end":2195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149289,"byte_end":9149306,"line_start":2196,"line_end":2196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149765,"byte_end":9149784,"line_start":2212,"line_end":2212,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149450,"byte_end":9149500,"line_start":2202,"line_end":2202,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149501,"byte_end":9149508,"line_start":2203,"line_end":2203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149509,"byte_end":9149532,"line_start":2204,"line_end":2204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149533,"byte_end":9149569,"line_start":2205,"line_end":2205,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149570,"byte_end":9149605,"line_start":2206,"line_end":2206,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149606,"byte_end":9149663,"line_start":2207,"line_end":2207,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149664,"byte_end":9149671,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149672,"byte_end":9149683,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149684,"byte_end":9149701,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150372,"byte_end":9150393,"line_start":2231,"line_end":2231,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(\n   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n );\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149846,"byte_end":9149907,"line_start":2216,"line_end":2216,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149908,"byte_end":9149915,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149916,"byte_end":9149939,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149940,"byte_end":9149951,"line_start":2219,"line_end":2219,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9149952,"byte_end":9150029,"line_start":2220,"line_end":2220,"column_start":1,"column_end":78}},{"value":"/ let b = set_reversed_i8_m128i(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150030,"byte_end":9150064,"line_start":2221,"line_end":2221,"column_start":1,"column_end":35}},{"value":"/   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150065,"byte_end":9150127,"line_start":2222,"line_end":2222,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150128,"byte_end":9150134,"line_start":2223,"line_end":2223,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150135,"byte_end":9150192,"line_start":2224,"line_end":2224,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150193,"byte_end":9150200,"line_start":2225,"line_end":2225,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150201,"byte_end":9150212,"line_start":2226,"line_end":2226,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150213,"byte_end":9150230,"line_start":2227,"line_end":2227,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150231,"byte_end":9150267,"line_start":2228,"line_end":2228,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150268,"byte_end":9150308,"line_start":2229,"line_end":2229,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151065,"byte_end":9151087,"line_start":2252,"line_end":2252,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150615,"byte_end":9150676,"line_start":2240,"line_end":2240,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150677,"byte_end":9150684,"line_start":2241,"line_end":2241,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150685,"byte_end":9150708,"line_start":2242,"line_end":2242,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150709,"byte_end":9150763,"line_start":2243,"line_end":2243,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150764,"byte_end":9150827,"line_start":2244,"line_end":2244,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150828,"byte_end":9150885,"line_start":2245,"line_end":2245,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150886,"byte_end":9150893,"line_start":2246,"line_end":2246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150894,"byte_end":9150905,"line_start":2247,"line_end":2247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150906,"byte_end":9150923,"line_start":2248,"line_end":2248,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150924,"byte_end":9150960,"line_start":2249,"line_end":2249,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9150961,"byte_end":9151001,"line_start":2250,"line_end":2250,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151570,"byte_end":9151592,"line_start":2268,"line_end":2268,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151230,"byte_end":9151291,"line_start":2258,"line_end":2258,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151292,"byte_end":9151299,"line_start":2259,"line_end":2259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151300,"byte_end":9151323,"line_start":2260,"line_end":2260,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151324,"byte_end":9151362,"line_start":2261,"line_end":2261,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151363,"byte_end":9151410,"line_start":2262,"line_end":2262,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151411,"byte_end":9151468,"line_start":2263,"line_end":2263,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151469,"byte_end":9151476,"line_start":2264,"line_end":2264,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151477,"byte_end":9151488,"line_start":2265,"line_end":2265,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151489,"byte_end":9151506,"line_start":2266,"line_end":2266,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152010,"byte_end":9152028,"line_start":2282,"line_end":2282,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151686,"byte_end":9151747,"line_start":2272,"line_end":2272,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151748,"byte_end":9151755,"line_start":2273,"line_end":2273,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151756,"byte_end":9151779,"line_start":2274,"line_end":2274,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151780,"byte_end":9151822,"line_start":2275,"line_end":2275,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151823,"byte_end":9151864,"line_start":2276,"line_end":2276,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151865,"byte_end":9151908,"line_start":2277,"line_end":2277,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151909,"byte_end":9151916,"line_start":2278,"line_end":2278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151917,"byte_end":9151928,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9151929,"byte_end":9151946,"line_start":2280,"line_end":2280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152312,"byte_end":9152324,"line_start":2295,"line_end":2295,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152097,"byte_end":9152116,"line_start":2286,"line_end":2286,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152117,"byte_end":9152124,"line_start":2287,"line_end":2287,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152125,"byte_end":9152148,"line_start":2288,"line_end":2288,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152149,"byte_end":9152176,"line_start":2289,"line_end":2289,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152177,"byte_end":9152210,"line_start":2290,"line_end":2290,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152211,"byte_end":9152218,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152219,"byte_end":9152230,"line_start":2292,"line_end":2292,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152231,"byte_end":9152248,"line_start":2293,"line_end":2293,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152605,"byte_end":9152617,"line_start":2308,"line_end":2308,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152381,"byte_end":9152401,"line_start":2299,"line_end":2299,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152402,"byte_end":9152409,"line_start":2300,"line_end":2300,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152410,"byte_end":9152433,"line_start":2301,"line_end":2301,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152434,"byte_end":9152461,"line_start":2302,"line_end":2302,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152462,"byte_end":9152503,"line_start":2303,"line_end":2303,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152504,"byte_end":9152511,"line_start":2304,"line_end":2304,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152512,"byte_end":9152523,"line_start":2305,"line_end":2305,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9152524,"byte_end":9152541,"line_start":2306,"line_end":2306,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157308,"byte_end":9157325,"line_start":2440,"line_end":2440,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156819,"byte_end":9156896,"line_start":2424,"line_end":2424,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156897,"byte_end":9156900,"line_start":2425,"line_end":2425,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156901,"byte_end":9156921,"line_start":2426,"line_end":2426,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156922,"byte_end":9156929,"line_start":2427,"line_end":2427,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156930,"byte_end":9156953,"line_start":2428,"line_end":2428,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9156954,"byte_end":9157008,"line_start":2429,"line_end":2429,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157009,"byte_end":9157045,"line_start":2430,"line_end":2430,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157046,"byte_end":9157099,"line_start":2431,"line_end":2431,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157100,"byte_end":9157115,"line_start":2432,"line_end":2432,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157116,"byte_end":9157124,"line_start":2433,"line_end":2433,"column_start":1,"column_end":9}},{"value":"/   [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157125,"byte_end":9157199,"line_start":2434,"line_end":2434,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157200,"byte_end":9157206,"line_start":2435,"line_end":2435,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157207,"byte_end":9157214,"line_start":2436,"line_end":2436,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157215,"byte_end":9157226,"line_start":2437,"line_end":2437,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157227,"byte_end":9157244,"line_start":2438,"line_end":2438,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157835,"byte_end":9157852,"line_start":2457,"line_end":2457,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157412,"byte_end":9157489,"line_start":2444,"line_end":2444,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157490,"byte_end":9157493,"line_start":2445,"line_end":2445,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157494,"byte_end":9157514,"line_start":2446,"line_end":2446,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157515,"byte_end":9157522,"line_start":2447,"line_end":2447,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157523,"byte_end":9157546,"line_start":2448,"line_end":2448,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157547,"byte_end":9157589,"line_start":2449,"line_end":2449,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157590,"byte_end":9157626,"line_start":2450,"line_end":2450,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157627,"byte_end":9157680,"line_start":2451,"line_end":2451,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157681,"byte_end":9157733,"line_start":2452,"line_end":2452,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157734,"byte_end":9157741,"line_start":2453,"line_end":2453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157742,"byte_end":9157753,"line_start":2454,"line_end":2454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157754,"byte_end":9157771,"line_start":2455,"line_end":2455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158340,"byte_end":9158357,"line_start":2474,"line_end":2474,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9157939,"byte_end":9158016,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158017,"byte_end":9158020,"line_start":2462,"line_end":2462,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158021,"byte_end":9158041,"line_start":2463,"line_end":2463,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158042,"byte_end":9158049,"line_start":2464,"line_end":2464,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158050,"byte_end":9158073,"line_start":2465,"line_end":2465,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158074,"byte_end":9158110,"line_start":2466,"line_end":2466,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158111,"byte_end":9158147,"line_start":2467,"line_end":2467,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158148,"byte_end":9158201,"line_start":2468,"line_end":2468,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158202,"byte_end":9158238,"line_start":2469,"line_end":2469,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158239,"byte_end":9158246,"line_start":2470,"line_end":2470,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158247,"byte_end":9158258,"line_start":2471,"line_end":2471,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9158259,"byte_end":9158276,"line_start":2472,"line_end":2472,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160695,"byte_end":9160705,"line_start":2554,"line_end":2554,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160424,"byte_end":9160447,"line_start":2544,"line_end":2544,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160448,"byte_end":9160455,"line_start":2545,"line_end":2545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160456,"byte_end":9160479,"line_start":2546,"line_end":2546,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160480,"byte_end":9160524,"line_start":2547,"line_end":2547,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160525,"byte_end":9160562,"line_start":2548,"line_end":2548,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160563,"byte_end":9160593,"line_start":2549,"line_end":2549,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160594,"byte_end":9160601,"line_start":2550,"line_end":2550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160602,"byte_end":9160613,"line_start":2551,"line_end":2551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160614,"byte_end":9160631,"line_start":2552,"line_end":2552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161119,"byte_end":9161131,"line_start":2569,"line_end":2569,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160767,"byte_end":9160824,"line_start":2558,"line_end":2558,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160825,"byte_end":9160832,"line_start":2559,"line_end":2559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160833,"byte_end":9160856,"line_start":2560,"line_end":2560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160857,"byte_end":9160899,"line_start":2561,"line_end":2561,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160900,"byte_end":9160943,"line_start":2562,"line_end":2562,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160944,"byte_end":9160975,"line_start":2563,"line_end":2563,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9160976,"byte_end":9161017,"line_start":2564,"line_end":2564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161018,"byte_end":9161025,"line_start":2565,"line_end":2565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161026,"byte_end":9161037,"line_start":2566,"line_end":2566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161038,"byte_end":9161055,"line_start":2567,"line_end":2567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161716,"byte_end":9161733,"line_start":2589,"line_end":2589,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161208,"byte_end":9161286,"line_start":2573,"line_end":2573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161287,"byte_end":9161290,"line_start":2574,"line_end":2574,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161291,"byte_end":9161321,"line_start":2575,"line_end":2575,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161322,"byte_end":9161329,"line_start":2576,"line_end":2576,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161330,"byte_end":9161353,"line_start":2577,"line_end":2577,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161354,"byte_end":9161412,"line_start":2578,"line_end":2578,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161413,"byte_end":9161449,"line_start":2579,"line_end":2579,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161450,"byte_end":9161503,"line_start":2580,"line_end":2580,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161504,"byte_end":9161519,"line_start":2581,"line_end":2581,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161520,"byte_end":9161528,"line_start":2582,"line_end":2582,"column_start":1,"column_end":9}},{"value":"/   [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161529,"byte_end":9161607,"line_start":2583,"line_end":2583,"column_start":1,"column_end":79}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161608,"byte_end":9161614,"line_start":2584,"line_end":2584,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161615,"byte_end":9161622,"line_start":2585,"line_end":2585,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161623,"byte_end":9161634,"line_start":2586,"line_end":2586,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161635,"byte_end":9161652,"line_start":2587,"line_end":2587,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162258,"byte_end":9162275,"line_start":2606,"line_end":2606,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161820,"byte_end":9161898,"line_start":2593,"line_end":2593,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161899,"byte_end":9161902,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161903,"byte_end":9161933,"line_start":2595,"line_end":2595,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161934,"byte_end":9161941,"line_start":2596,"line_end":2596,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161942,"byte_end":9161965,"line_start":2597,"line_end":2597,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9161966,"byte_end":9162010,"line_start":2598,"line_end":2598,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162011,"byte_end":9162047,"line_start":2599,"line_end":2599,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162048,"byte_end":9162101,"line_start":2600,"line_end":2600,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162102,"byte_end":9162156,"line_start":2601,"line_end":2601,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162157,"byte_end":9162164,"line_start":2602,"line_end":2602,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162165,"byte_end":9162176,"line_start":2603,"line_end":2603,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9162177,"byte_end":9162194,"line_start":2604,"line_end":2604,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164356,"byte_end":9164373,"line_start":2683,"line_end":2683,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163798,"byte_end":9163876,"line_start":2659,"line_end":2659,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163877,"byte_end":9163880,"line_start":2660,"line_end":2660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163881,"byte_end":9163888,"line_start":2661,"line_end":2661,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163889,"byte_end":9163912,"line_start":2662,"line_end":2662,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163913,"byte_end":9163975,"line_start":2663,"line_end":2663,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9163976,"byte_end":9164012,"line_start":2664,"line_end":2664,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164013,"byte_end":9164066,"line_start":2665,"line_end":2665,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164067,"byte_end":9164082,"line_start":2666,"line_end":2666,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164083,"byte_end":9164091,"line_start":2667,"line_end":2667,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164092,"byte_end":9164099,"line_start":2668,"line_end":2668,"column_start":1,"column_end":8}},{"value":"/     1_u16 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164100,"byte_end":9164119,"line_start":2669,"line_end":2669,"column_start":1,"column_end":20}},{"value":"/     2 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164120,"byte_end":9164135,"line_start":2670,"line_end":2670,"column_start":1,"column_end":16}},{"value":"/     3 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164136,"byte_end":9164151,"line_start":2671,"line_end":2671,"column_start":1,"column_end":16}},{"value":"/     4 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164152,"byte_end":9164167,"line_start":2672,"line_end":2672,"column_start":1,"column_end":16}},{"value":"/     100 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164168,"byte_end":9164185,"line_start":2673,"line_end":2673,"column_start":1,"column_end":18}},{"value":"/     200 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164186,"byte_end":9164203,"line_start":2674,"line_end":2674,"column_start":1,"column_end":18}},{"value":"/     300 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164204,"byte_end":9164221,"line_start":2675,"line_end":2675,"column_start":1,"column_end":18}},{"value":"/     400 >> 3,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164222,"byte_end":9164239,"line_start":2676,"line_end":2676,"column_start":1,"column_end":18}},{"value":"/   ]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164240,"byte_end":9164247,"line_start":2677,"line_end":2677,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164248,"byte_end":9164254,"line_start":2678,"line_end":2678,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164255,"byte_end":9164262,"line_start":2679,"line_end":2679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164263,"byte_end":9164274,"line_start":2680,"line_end":2680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164275,"byte_end":9164292,"line_start":2681,"line_end":2681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164872,"byte_end":9164889,"line_start":2699,"line_end":2699,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164460,"byte_end":9164538,"line_start":2687,"line_end":2687,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164539,"byte_end":9164542,"line_start":2688,"line_end":2688,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164543,"byte_end":9164550,"line_start":2689,"line_end":2689,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164551,"byte_end":9164574,"line_start":2690,"line_end":2690,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164575,"byte_end":9164621,"line_start":2691,"line_end":2691,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164622,"byte_end":9164658,"line_start":2692,"line_end":2692,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164659,"byte_end":9164712,"line_start":2693,"line_end":2693,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164713,"byte_end":9164770,"line_start":2694,"line_end":2694,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164771,"byte_end":9164778,"line_start":2695,"line_end":2695,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164779,"byte_end":9164790,"line_start":2696,"line_end":2696,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164791,"byte_end":9164808,"line_start":2697,"line_end":2697,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165380,"byte_end":9165397,"line_start":2716,"line_end":2716,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9164976,"byte_end":9165054,"line_start":2703,"line_end":2703,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165055,"byte_end":9165058,"line_start":2704,"line_end":2704,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165059,"byte_end":9165079,"line_start":2705,"line_end":2705,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165080,"byte_end":9165087,"line_start":2706,"line_end":2706,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165088,"byte_end":9165111,"line_start":2707,"line_end":2707,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165112,"byte_end":9165149,"line_start":2708,"line_end":2708,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165150,"byte_end":9165186,"line_start":2709,"line_end":2709,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165187,"byte_end":9165240,"line_start":2710,"line_end":2710,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165241,"byte_end":9165278,"line_start":2711,"line_end":2711,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165279,"byte_end":9165286,"line_start":2712,"line_end":2712,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165287,"byte_end":9165298,"line_start":2713,"line_end":2713,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9165299,"byte_end":9165316,"line_start":2714,"line_end":2714,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168157,"byte_end":9168168,"line_start":2814,"line_end":2814,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167827,"byte_end":9167871,"line_start":2803,"line_end":2803,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167872,"byte_end":9167879,"line_start":2804,"line_end":2804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167880,"byte_end":9167903,"line_start":2805,"line_end":2805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167904,"byte_end":9167948,"line_start":2806,"line_end":2806,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167949,"byte_end":9167980,"line_start":2807,"line_end":2807,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9167981,"byte_end":9168008,"line_start":2808,"line_end":2808,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168009,"byte_end":9168034,"line_start":2809,"line_end":2809,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168035,"byte_end":9168067,"line_start":2810,"line_end":2810,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168068,"byte_end":9168075,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168076,"byte_end":9168093,"line_start":2812,"line_end":2812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168555,"byte_end":9168568,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168259,"byte_end":9168312,"line_start":2818,"line_end":2818,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168313,"byte_end":9168320,"line_start":2819,"line_end":2819,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168321,"byte_end":9168344,"line_start":2820,"line_end":2820,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168345,"byte_end":9168389,"line_start":2821,"line_end":2821,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168390,"byte_end":9168410,"line_start":2822,"line_end":2822,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168411,"byte_end":9168440,"line_start":2823,"line_end":2823,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168441,"byte_end":9168465,"line_start":2824,"line_end":2824,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168466,"byte_end":9168473,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168474,"byte_end":9168491,"line_start":2826,"line_end":2826,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169001,"byte_end":9169018,"line_start":2843,"line_end":2843,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168643,"byte_end":9168709,"line_start":2832,"line_end":2832,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168710,"byte_end":9168717,"line_start":2833,"line_end":2833,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168718,"byte_end":9168741,"line_start":2834,"line_end":2834,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168742,"byte_end":9168786,"line_start":2835,"line_end":2835,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168787,"byte_end":9168818,"line_start":2836,"line_end":2836,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168819,"byte_end":9168852,"line_start":2837,"line_end":2837,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168853,"byte_end":9168878,"line_start":2838,"line_end":2838,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168879,"byte_end":9168911,"line_start":2839,"line_end":2839,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168912,"byte_end":9168919,"line_start":2840,"line_end":2840,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9168920,"byte_end":9168937,"line_start":2841,"line_end":2841,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169440,"byte_end":9169451,"line_start":2858,"line_end":2858,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169110,"byte_end":9169154,"line_start":2847,"line_end":2847,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169155,"byte_end":9169162,"line_start":2848,"line_end":2848,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169163,"byte_end":9169186,"line_start":2849,"line_end":2849,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169187,"byte_end":9169225,"line_start":2850,"line_end":2850,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169226,"byte_end":9169257,"line_start":2851,"line_end":2851,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169258,"byte_end":9169285,"line_start":2852,"line_end":2852,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169286,"byte_end":9169317,"line_start":2853,"line_end":2853,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169318,"byte_end":9169350,"line_start":2854,"line_end":2854,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169351,"byte_end":9169358,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169359,"byte_end":9169376,"line_start":2856,"line_end":2856,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169828,"byte_end":9169846,"line_start":2872,"line_end":2872,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169526,"byte_end":9169580,"line_start":2862,"line_end":2862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169581,"byte_end":9169588,"line_start":2863,"line_end":2863,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169589,"byte_end":9169612,"line_start":2864,"line_end":2864,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169613,"byte_end":9169657,"line_start":2865,"line_end":2865,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169658,"byte_end":9169678,"line_start":2866,"line_end":2866,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169679,"byte_end":9169713,"line_start":2867,"line_end":2867,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169714,"byte_end":9169738,"line_start":2868,"line_end":2868,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169739,"byte_end":9169746,"line_start":2869,"line_end":2869,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169747,"byte_end":9169764,"line_start":2870,"line_end":2870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170245,"byte_end":9170262,"line_start":2887,"line_end":2887,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169922,"byte_end":9169966,"line_start":2876,"line_end":2876,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169967,"byte_end":9169974,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169975,"byte_end":9169998,"line_start":2878,"line_end":2878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9169999,"byte_end":9170035,"line_start":2879,"line_end":2879,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170036,"byte_end":9170058,"line_start":2880,"line_end":2880,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170059,"byte_end":9170092,"line_start":2881,"line_end":2881,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170093,"byte_end":9170118,"line_start":2882,"line_end":2882,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170119,"byte_end":9170126,"line_start":2883,"line_end":2883,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170127,"byte_end":9170144,"line_start":2884,"line_end":2884,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170145,"byte_end":9170181,"line_start":2885,"line_end":2885,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170696,"byte_end":9170716,"line_start":2902,"line_end":2902,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170357,"byte_end":9170401,"line_start":2891,"line_end":2891,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170402,"byte_end":9170409,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170410,"byte_end":9170433,"line_start":2893,"line_end":2893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170434,"byte_end":9170478,"line_start":2894,"line_end":2894,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170479,"byte_end":9170510,"line_start":2895,"line_end":2895,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170511,"byte_end":9170547,"line_start":2896,"line_end":2896,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170548,"byte_end":9170573,"line_start":2897,"line_end":2897,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170574,"byte_end":9170606,"line_start":2898,"line_end":2898,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170607,"byte_end":9170614,"line_start":2899,"line_end":2899,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170615,"byte_end":9170632,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171118,"byte_end":9171139,"line_start":2916,"line_end":2916,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170808,"byte_end":9170852,"line_start":2906,"line_end":2906,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170853,"byte_end":9170860,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170861,"byte_end":9170884,"line_start":2908,"line_end":2908,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170885,"byte_end":9170929,"line_start":2909,"line_end":2909,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170930,"byte_end":9170957,"line_start":2910,"line_end":2910,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170958,"byte_end":9170995,"line_start":2911,"line_end":2911,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9170996,"byte_end":9171028,"line_start":2912,"line_end":2912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171029,"byte_end":9171036,"line_start":2913,"line_end":2913,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171037,"byte_end":9171054,"line_start":2914,"line_end":2914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171621,"byte_end":9171642,"line_start":2931,"line_end":2931,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171221,"byte_end":9171265,"line_start":2920,"line_end":2920,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171266,"byte_end":9171273,"line_start":2921,"line_end":2921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171274,"byte_end":9171297,"line_start":2922,"line_end":2922,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171298,"byte_end":9171309,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171310,"byte_end":9171387,"line_start":2924,"line_end":2924,"column_start":1,"column_end":78}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171388,"byte_end":9171415,"line_start":2925,"line_end":2925,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171416,"byte_end":9171453,"line_start":2926,"line_end":2926,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171454,"byte_end":9171531,"line_start":2927,"line_end":2927,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171532,"byte_end":9171539,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171540,"byte_end":9171557,"line_start":2929,"line_end":2929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172260,"byte_end":9172272,"line_start":2952,"line_end":2952,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171734,"byte_end":9171774,"line_start":2935,"line_end":2935,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171775,"byte_end":9171782,"line_start":2936,"line_end":2936,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171783,"byte_end":9171806,"line_start":2937,"line_end":2937,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171807,"byte_end":9171818,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171819,"byte_end":9171896,"line_start":2939,"line_end":2939,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171897,"byte_end":9171922,"line_start":2940,"line_end":2940,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171923,"byte_end":9171993,"line_start":2941,"line_end":2941,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9171994,"byte_end":9172001,"line_start":2942,"line_end":2942,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172002,"byte_end":9172050,"line_start":2943,"line_end":2943,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172051,"byte_end":9172066,"line_start":2944,"line_end":2944,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172067,"byte_end":9172075,"line_start":2945,"line_end":2945,"column_start":1,"column_end":9}},{"value":"/   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172076,"byte_end":9172151,"line_start":2946,"line_end":2946,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172152,"byte_end":9172158,"line_start":2947,"line_end":2947,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172159,"byte_end":9172166,"line_start":2948,"line_end":2948,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172167,"byte_end":9172178,"line_start":2949,"line_end":2949,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172179,"byte_end":9172196,"line_start":2950,"line_end":2950,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172758,"byte_end":9172771,"line_start":2967,"line_end":2967,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172350,"byte_end":9172391,"line_start":2956,"line_end":2956,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172392,"byte_end":9172399,"line_start":2957,"line_end":2957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172400,"byte_end":9172423,"line_start":2958,"line_end":2958,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172424,"byte_end":9172482,"line_start":2959,"line_end":2959,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172483,"byte_end":9172548,"line_start":2960,"line_end":2960,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172549,"byte_end":9172598,"line_start":2961,"line_end":2961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172599,"byte_end":9172656,"line_start":2962,"line_end":2962,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172657,"byte_end":9172664,"line_start":2963,"line_end":2963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172665,"byte_end":9172676,"line_start":2964,"line_end":2964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172677,"byte_end":9172694,"line_start":2965,"line_end":2965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173198,"byte_end":9173211,"line_start":2982,"line_end":2982,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172850,"byte_end":9172891,"line_start":2971,"line_end":2971,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172892,"byte_end":9172899,"line_start":2972,"line_end":2972,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172900,"byte_end":9172923,"line_start":2973,"line_end":2973,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172924,"byte_end":9172962,"line_start":2974,"line_end":2974,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9172963,"byte_end":9173005,"line_start":2975,"line_end":2975,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173006,"byte_end":9173055,"line_start":2976,"line_end":2976,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173056,"byte_end":9173096,"line_start":2977,"line_end":2977,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173097,"byte_end":9173104,"line_start":2978,"line_end":2978,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173105,"byte_end":9173116,"line_start":2979,"line_end":2979,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173117,"byte_end":9173134,"line_start":2980,"line_end":2980,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173626,"byte_end":9173639,"line_start":2997,"line_end":2997,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173290,"byte_end":9173331,"line_start":2986,"line_end":2986,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173332,"byte_end":9173339,"line_start":2987,"line_end":2987,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173340,"byte_end":9173363,"line_start":2988,"line_end":2988,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173364,"byte_end":9173402,"line_start":2989,"line_end":2989,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173403,"byte_end":9173443,"line_start":2990,"line_end":2990,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173444,"byte_end":9173493,"line_start":2991,"line_end":2991,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173494,"byte_end":9173524,"line_start":2992,"line_end":2992,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173525,"byte_end":9173532,"line_start":2993,"line_end":2993,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173533,"byte_end":9173544,"line_start":2994,"line_end":2994,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173545,"byte_end":9173562,"line_start":2995,"line_end":2995,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174037,"byte_end":9174046,"line_start":3012,"line_end":3012,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173718,"byte_end":9173739,"line_start":3001,"line_end":3001,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173740,"byte_end":9173747,"line_start":3002,"line_end":3002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173748,"byte_end":9173771,"line_start":3003,"line_end":3003,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173772,"byte_end":9173816,"line_start":3004,"line_end":3004,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173817,"byte_end":9173862,"line_start":3005,"line_end":3005,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173863,"byte_end":9173902,"line_start":3006,"line_end":3006,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173903,"byte_end":9173935,"line_start":3007,"line_end":3007,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173936,"byte_end":9173943,"line_start":3008,"line_end":3008,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173944,"byte_end":9173955,"line_start":3009,"line_end":3009,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9173956,"byte_end":9173973,"line_start":3010,"line_end":3010,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174469,"byte_end":9174480,"line_start":3027,"line_end":3027,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174122,"byte_end":9174167,"line_start":3016,"line_end":3016,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174168,"byte_end":9174175,"line_start":3017,"line_end":3017,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174176,"byte_end":9174199,"line_start":3018,"line_end":3018,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174200,"byte_end":9174244,"line_start":3019,"line_end":3019,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174245,"byte_end":9174292,"line_start":3020,"line_end":3020,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174293,"byte_end":9174334,"line_start":3021,"line_end":3021,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174335,"byte_end":9174367,"line_start":3022,"line_end":3022,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174368,"byte_end":9174375,"line_start":3023,"line_end":3023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174376,"byte_end":9174387,"line_start":3024,"line_end":3024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174388,"byte_end":9174405,"line_start":3025,"line_end":3025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175109,"byte_end":9175132,"line_start":3048,"line_end":3048,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([\n   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174556,"byte_end":9174607,"line_start":3031,"line_end":3031,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174608,"byte_end":9174615,"line_start":3032,"line_end":3032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174616,"byte_end":9174639,"line_start":3033,"line_end":3033,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174640,"byte_end":9174651,"line_start":3034,"line_end":3034,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174652,"byte_end":9174734,"line_start":3035,"line_end":3035,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174735,"byte_end":9174760,"line_start":3036,"line_end":3036,"column_start":1,"column_end":26}},{"value":"/   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174761,"byte_end":9174830,"line_start":3037,"line_end":3037,"column_start":1,"column_end":70}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174831,"byte_end":9174838,"line_start":3038,"line_end":3038,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174839,"byte_end":9174898,"line_start":3039,"line_end":3039,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174899,"byte_end":9174914,"line_start":3040,"line_end":3040,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174915,"byte_end":9174923,"line_start":3041,"line_end":3041,"column_start":1,"column_end":9}},{"value":"/   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9174924,"byte_end":9175000,"line_start":3042,"line_end":3042,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175001,"byte_end":9175007,"line_start":3043,"line_end":3043,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175008,"byte_end":9175015,"line_start":3044,"line_end":3044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175016,"byte_end":9175027,"line_start":3045,"line_end":3045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175028,"byte_end":9175045,"line_start":3046,"line_end":3046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175650,"byte_end":9175674,"line_start":3063,"line_end":3063,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175211,"byte_end":9175263,"line_start":3052,"line_end":3052,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175264,"byte_end":9175271,"line_start":3053,"line_end":3053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175272,"byte_end":9175295,"line_start":3054,"line_end":3054,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175296,"byte_end":9175354,"line_start":3055,"line_end":3055,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175355,"byte_end":9175425,"line_start":3056,"line_end":3056,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175426,"byte_end":9175486,"line_start":3057,"line_end":3057,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175487,"byte_end":9175548,"line_start":3058,"line_end":3058,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175549,"byte_end":9175556,"line_start":3059,"line_end":3059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175557,"byte_end":9175568,"line_start":3060,"line_end":3060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175569,"byte_end":9175586,"line_start":3061,"line_end":3061,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176264,"byte_end":9176287,"line_start":3080,"line_end":3080,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b =\n   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175754,"byte_end":9175805,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175806,"byte_end":9175813,"line_start":3068,"line_end":3068,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175814,"byte_end":9175837,"line_start":3069,"line_end":3069,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175838,"byte_end":9175849,"line_start":3070,"line_end":3070,"column_start":1,"column_end":12}},{"value":"/   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175850,"byte_end":9175931,"line_start":3071,"line_end":3071,"column_start":1,"column_end":82}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175932,"byte_end":9175943,"line_start":3072,"line_end":3072,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9175944,"byte_end":9176026,"line_start":3073,"line_end":3073,"column_start":1,"column_end":83}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176027,"byte_end":9176086,"line_start":3074,"line_end":3074,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176087,"byte_end":9176162,"line_start":3075,"line_end":3075,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176163,"byte_end":9176170,"line_start":3076,"line_end":3076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176171,"byte_end":9176182,"line_start":3077,"line_end":3077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176183,"byte_end":9176200,"line_start":3078,"line_end":3078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176811,"byte_end":9176835,"line_start":3095,"line_end":3095,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176366,"byte_end":9176418,"line_start":3084,"line_end":3084,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176419,"byte_end":9176426,"line_start":3085,"line_end":3085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176427,"byte_end":9176450,"line_start":3086,"line_end":3086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176451,"byte_end":9176521,"line_start":3087,"line_end":3087,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176522,"byte_end":9176594,"line_start":3088,"line_end":3088,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176595,"byte_end":9176655,"line_start":3089,"line_end":3089,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176656,"byte_end":9176709,"line_start":3090,"line_end":3090,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176710,"byte_end":9176717,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176718,"byte_end":9176729,"line_start":3092,"line_end":3092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176730,"byte_end":9176747,"line_start":3093,"line_end":3093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177461,"byte_end":9177481,"line_start":3116,"line_end":3116,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176915,"byte_end":9176972,"line_start":3099,"line_end":3099,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176973,"byte_end":9176980,"line_start":3100,"line_end":3100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9176981,"byte_end":9177004,"line_start":3101,"line_end":3101,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177005,"byte_end":9177016,"line_start":3102,"line_end":3102,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177017,"byte_end":9177094,"line_start":3103,"line_end":3103,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177095,"byte_end":9177120,"line_start":3104,"line_end":3104,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177121,"byte_end":9177191,"line_start":3105,"line_end":3105,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177192,"byte_end":9177199,"line_start":3106,"line_end":3106,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177200,"byte_end":9177256,"line_start":3107,"line_end":3107,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177257,"byte_end":9177272,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177273,"byte_end":9177281,"line_start":3109,"line_end":3109,"column_start":1,"column_end":9}},{"value":"/   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177282,"byte_end":9177352,"line_start":3110,"line_end":3110,"column_start":1,"column_end":71}},{"value":"/ );","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177353,"byte_end":9177359,"line_start":3111,"line_end":3111,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177360,"byte_end":9177367,"line_start":3112,"line_end":3112,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177368,"byte_end":9177379,"line_start":3113,"line_end":3113,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177380,"byte_end":9177397,"line_start":3114,"line_end":3114,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177991,"byte_end":9178012,"line_start":3131,"line_end":3131,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177564,"byte_end":9177622,"line_start":3120,"line_end":3120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177623,"byte_end":9177630,"line_start":3121,"line_end":3121,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177631,"byte_end":9177654,"line_start":3122,"line_end":3122,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177655,"byte_end":9177713,"line_start":3123,"line_end":3123,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177714,"byte_end":9177775,"line_start":3124,"line_end":3124,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177776,"byte_end":9177833,"line_start":3125,"line_end":3125,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177834,"byte_end":9177889,"line_start":3126,"line_end":3126,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177890,"byte_end":9177897,"line_start":3127,"line_end":3127,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177898,"byte_end":9177909,"line_start":3128,"line_end":3128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9177910,"byte_end":9177927,"line_start":3129,"line_end":3129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178457,"byte_end":9178478,"line_start":3146,"line_end":3146,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178096,"byte_end":9178154,"line_start":3135,"line_end":3135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178155,"byte_end":9178162,"line_start":3136,"line_end":3136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178163,"byte_end":9178186,"line_start":3137,"line_end":3137,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178187,"byte_end":9178225,"line_start":3138,"line_end":3138,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178226,"byte_end":9178264,"line_start":3139,"line_end":3139,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178265,"byte_end":9178322,"line_start":3140,"line_end":3140,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178323,"byte_end":9178355,"line_start":3141,"line_end":3141,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178356,"byte_end":9178363,"line_start":3142,"line_end":3142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178364,"byte_end":9178375,"line_start":3143,"line_end":3143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178376,"byte_end":9178393,"line_start":3144,"line_end":3144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178920,"byte_end":9178941,"line_start":3161,"line_end":3161,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178562,"byte_end":9178620,"line_start":3150,"line_end":3150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178621,"byte_end":9178628,"line_start":3151,"line_end":3151,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178629,"byte_end":9178652,"line_start":3152,"line_end":3152,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178653,"byte_end":9178691,"line_start":3153,"line_end":3153,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178692,"byte_end":9178732,"line_start":3154,"line_end":3154,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178733,"byte_end":9178790,"line_start":3155,"line_end":3155,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178791,"byte_end":9178818,"line_start":3156,"line_end":3156,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178819,"byte_end":9178826,"line_start":3157,"line_end":3157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178827,"byte_end":9178838,"line_start":3158,"line_end":3158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9178839,"byte_end":9178856,"line_start":3159,"line_end":3159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179383,"byte_end":9179400,"line_start":3176,"line_end":3176,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179025,"byte_end":9179077,"line_start":3165,"line_end":3165,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179078,"byte_end":9179085,"line_start":3166,"line_end":3166,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179086,"byte_end":9179109,"line_start":3167,"line_end":3167,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179110,"byte_end":9179154,"line_start":3168,"line_end":3168,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179155,"byte_end":9179200,"line_start":3169,"line_end":3169,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179201,"byte_end":9179248,"line_start":3170,"line_end":3170,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179249,"byte_end":9179281,"line_start":3171,"line_end":3171,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179282,"byte_end":9179289,"line_start":3172,"line_end":3172,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179290,"byte_end":9179301,"line_start":3173,"line_end":3173,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179302,"byte_end":9179319,"line_start":3174,"line_end":3174,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180003,"byte_end":9180022,"line_start":3194,"line_end":3194,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179481,"byte_end":9179537,"line_start":3180,"line_end":3180,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179538,"byte_end":9179545,"line_start":3181,"line_end":3181,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179546,"byte_end":9179569,"line_start":3182,"line_end":3182,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179570,"byte_end":9179581,"line_start":3183,"line_end":3183,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179582,"byte_end":9179659,"line_start":3184,"line_end":3184,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179660,"byte_end":9179685,"line_start":3185,"line_end":3185,"column_start":1,"column_end":26}},{"value":"/   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179686,"byte_end":9179760,"line_start":3186,"line_end":3186,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179761,"byte_end":9179768,"line_start":3187,"line_end":3187,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179769,"byte_end":9179824,"line_start":3188,"line_end":3188,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179825,"byte_end":9179901,"line_start":3189,"line_end":3189,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179902,"byte_end":9179909,"line_start":3190,"line_end":3190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179910,"byte_end":9179921,"line_start":3191,"line_end":3191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9179922,"byte_end":9179939,"line_start":3192,"line_end":3192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180519,"byte_end":9180539,"line_start":3209,"line_end":3209,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180105,"byte_end":9180162,"line_start":3198,"line_end":3198,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180163,"byte_end":9180170,"line_start":3199,"line_end":3199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180171,"byte_end":9180194,"line_start":3200,"line_end":3200,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180195,"byte_end":9180253,"line_start":3201,"line_end":3201,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180254,"byte_end":9180315,"line_start":3202,"line_end":3202,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180316,"byte_end":9180372,"line_start":3203,"line_end":3203,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180373,"byte_end":9180417,"line_start":3204,"line_end":3204,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180418,"byte_end":9180425,"line_start":3205,"line_end":3205,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180426,"byte_end":9180437,"line_start":3206,"line_end":3206,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180438,"byte_end":9180455,"line_start":3207,"line_end":3207,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180982,"byte_end":9181002,"line_start":3224,"line_end":3224,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180623,"byte_end":9180680,"line_start":3213,"line_end":3213,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180681,"byte_end":9180688,"line_start":3214,"line_end":3214,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180689,"byte_end":9180712,"line_start":3215,"line_end":3215,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180713,"byte_end":9180751,"line_start":3216,"line_end":3216,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180752,"byte_end":9180790,"line_start":3217,"line_end":3217,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180791,"byte_end":9180847,"line_start":3218,"line_end":3218,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180848,"byte_end":9180880,"line_start":3219,"line_end":3219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180881,"byte_end":9180888,"line_start":3220,"line_end":3220,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180889,"byte_end":9180900,"line_start":3221,"line_end":3221,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9180901,"byte_end":9180918,"line_start":3222,"line_end":3222,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181446,"byte_end":9181466,"line_start":3239,"line_end":3239,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181086,"byte_end":9181143,"line_start":3228,"line_end":3228,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181144,"byte_end":9181151,"line_start":3229,"line_end":3229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181152,"byte_end":9181175,"line_start":3230,"line_end":3230,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181176,"byte_end":9181214,"line_start":3231,"line_end":3231,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181215,"byte_end":9181255,"line_start":3232,"line_end":3232,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181256,"byte_end":9181312,"line_start":3233,"line_end":3233,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181313,"byte_end":9181344,"line_start":3234,"line_end":3234,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181345,"byte_end":9181352,"line_start":3235,"line_end":3235,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181353,"byte_end":9181364,"line_start":3236,"line_end":3236,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181365,"byte_end":9181382,"line_start":3237,"line_end":3237,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181907,"byte_end":9181923,"line_start":3254,"line_end":3254,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181550,"byte_end":9181601,"line_start":3243,"line_end":3243,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181602,"byte_end":9181609,"line_start":3244,"line_end":3244,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181610,"byte_end":9181633,"line_start":3245,"line_end":3245,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181634,"byte_end":9181678,"line_start":3246,"line_end":3246,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181679,"byte_end":9181724,"line_start":3247,"line_end":3247,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181725,"byte_end":9181771,"line_start":3248,"line_end":3248,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181772,"byte_end":9181805,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181806,"byte_end":9181813,"line_start":3250,"line_end":3250,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181814,"byte_end":9181825,"line_start":3251,"line_end":3251,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9181826,"byte_end":9181843,"line_start":3252,"line_end":3252,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182318,"byte_end":9182330,"line_start":3269,"line_end":3269,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182004,"byte_end":9182024,"line_start":3258,"line_end":3258,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182025,"byte_end":9182032,"line_start":3259,"line_end":3259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182033,"byte_end":9182056,"line_start":3260,"line_end":3260,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182057,"byte_end":9182099,"line_start":3261,"line_end":3261,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182100,"byte_end":9182142,"line_start":3262,"line_end":3262,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182143,"byte_end":9182185,"line_start":3263,"line_end":3263,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182186,"byte_end":9182216,"line_start":3264,"line_end":3264,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182217,"byte_end":9182224,"line_start":3265,"line_end":3265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182225,"byte_end":9182236,"line_start":3266,"line_end":3266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182237,"byte_end":9182254,"line_start":3267,"line_end":3267,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182720,"byte_end":9182732,"line_start":3284,"line_end":3284,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182406,"byte_end":9182426,"line_start":3273,"line_end":3273,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182427,"byte_end":9182434,"line_start":3274,"line_end":3274,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182435,"byte_end":9182458,"line_start":3275,"line_end":3275,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182459,"byte_end":9182497,"line_start":3276,"line_end":3276,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182498,"byte_end":9182536,"line_start":3277,"line_end":3277,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182537,"byte_end":9182585,"line_start":3278,"line_end":3278,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182586,"byte_end":9182618,"line_start":3279,"line_end":3279,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182619,"byte_end":9182626,"line_start":3280,"line_end":3280,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182627,"byte_end":9182638,"line_start":3281,"line_end":3281,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9182639,"byte_end":9182656,"line_start":3282,"line_end":3282,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":10563,"byte_end":10585,"line_start":238,"line_end":238,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11430,"byte_end":11454,"line_start":258,"line_end":258,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11745,"byte_end":11758,"line_start":270,"line_end":270,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12089,"byte_end":12102,"line_start":283,"line_end":283,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12051,"byte_end":12079,"line_start":282,"line_end":282,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996526,"byte_end":8996530,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996593,"byte_end":8996597,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996683,"byte_end":8996687,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996833,"byte_end":8996837,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997855,"byte_end":8997859,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997954,"byte_end":8997958,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997980,"byte_end":8997984,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8998112,"byte_end":8998116,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8998714,"byte_end":8998718,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8999180,"byte_end":8999184,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8999673,"byte_end":8999677,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9000174,"byte_end":9000178,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9000639,"byte_end":9000643,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9001104,"byte_end":9001108,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9001609,"byte_end":9001613,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9002111,"byte_end":9002115,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003523,"byte_end":9003528,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003591,"byte_end":9003596,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003683,"byte_end":9003688,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003837,"byte_end":9003842,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004857,"byte_end":9004862,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004957,"byte_end":9004962,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004984,"byte_end":9004989,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9005117,"byte_end":9005122,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9005722,"byte_end":9005727,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9006142,"byte_end":9006147,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9006593,"byte_end":9006598,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007060,"byte_end":9007065,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007480,"byte_end":9007485,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007900,"byte_end":9007905,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9008373,"byte_end":9008378,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9008843,"byte_end":9008848,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010361,"byte_end":9010366,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010429,"byte_end":9010434,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010521,"byte_end":9010526,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010685,"byte_end":9010690,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010785,"byte_end":9010790,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010812,"byte_end":9010817,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010955,"byte_end":9010960,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011246,"byte_end":9011251,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011548,"byte_end":9011553,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011839,"byte_end":9011844,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012141,"byte_end":9012146,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012432,"byte_end":9012437,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012734,"byte_end":9012739,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013025,"byte_end":9013030,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013324,"byte_end":9013329,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013599,"byte_end":9013604,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013939,"byte_end":9013944,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9014405,"byte_end":9014410,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9014904,"byte_end":9014909,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9015363,"byte_end":9015368,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9015834,"byte_end":9015839,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9016305,"byte_end":9016310,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9016768,"byte_end":9016773,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9017228,"byte_end":9017233,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018708,"byte_end":9018712,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018775,"byte_end":9018779,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018865,"byte_end":9018869,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019015,"byte_end":9019019,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020033,"byte_end":9020037,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020132,"byte_end":9020136,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020158,"byte_end":9020162,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020290,"byte_end":9020294,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020892,"byte_end":9020896,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9021378,"byte_end":9021382,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9021883,"byte_end":9021887,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9022396,"byte_end":9022400,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9022881,"byte_end":9022885,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9023366,"byte_end":9023370,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9023883,"byte_end":9023887,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9024397,"byte_end":9024401,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025820,"byte_end":9025825,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025888,"byte_end":9025893,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025980,"byte_end":9025985,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026134,"byte_end":9026139,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027154,"byte_end":9027159,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027254,"byte_end":9027259,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027281,"byte_end":9027286,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027414,"byte_end":9027419,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028019,"byte_end":9028024,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028439,"byte_end":9028444,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028890,"byte_end":9028895,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9029357,"byte_end":9029362,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9029777,"byte_end":9029782,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9030197,"byte_end":9030202,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9030670,"byte_end":9030675,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9031140,"byte_end":9031145,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032658,"byte_end":9032663,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032726,"byte_end":9032731,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032818,"byte_end":9032823,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032982,"byte_end":9032987,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033082,"byte_end":9033087,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033109,"byte_end":9033114,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033252,"byte_end":9033257,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033543,"byte_end":9033548,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033846,"byte_end":9033851,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034140,"byte_end":9034145,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034444,"byte_end":9034449,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034735,"byte_end":9034740,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035037,"byte_end":9035042,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035328,"byte_end":9035333,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035632,"byte_end":9035637,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035922,"byte_end":9035927,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9036272,"byte_end":9036277,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9036750,"byte_end":9036755,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9037261,"byte_end":9037266,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9037732,"byte_end":9037737,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9038223,"byte_end":9038228,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9038714,"byte_end":9038719,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9039189,"byte_end":9039194,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9039661,"byte_end":9039666,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9079740,"byte_end":9079744,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9079888,"byte_end":9079892,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080003,"byte_end":9080007,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080160,"byte_end":9080164,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080277,"byte_end":9080281,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080431,"byte_end":9080435,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080548,"byte_end":9080552,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080705,"byte_end":9080709,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080820,"byte_end":9080824,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080968,"byte_end":9080972,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081080,"byte_end":9081084,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081228,"byte_end":9081232,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081340,"byte_end":9081344,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081482,"byte_end":9081486,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081849,"byte_end":9081853,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081997,"byte_end":9082001,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9082115,"byte_end":9082119,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183463,"byte_end":9183468,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183613,"byte_end":9183618,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183729,"byte_end":9183734,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183888,"byte_end":9183893,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184006,"byte_end":9184011,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184162,"byte_end":9184167,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184280,"byte_end":9184285,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184439,"byte_end":9184444,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184555,"byte_end":9184560,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184705,"byte_end":9184710,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184818,"byte_end":9184823,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184968,"byte_end":9184973,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185081,"byte_end":9185086,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185226,"byte_end":9185231,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185595,"byte_end":9185600,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185745,"byte_end":9185750,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185864,"byte_end":9185869,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186279,"byte_end":9186284,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186438,"byte_end":9186443,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186556,"byte_end":9186561,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186712,"byte_end":9186717,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186830,"byte_end":9186835,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186989,"byte_end":9186994,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187105,"byte_end":9187110,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187462,"byte_end":9187467,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187817,"byte_end":9187822,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":7113,"byte_end":7131,"line_start":138,"line_end":138,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996526,"byte_end":8996530,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996593,"byte_end":8996597,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996683,"byte_end":8996687,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8996833,"byte_end":8996837,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997855,"byte_end":8997859,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997954,"byte_end":8997958,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8997980,"byte_end":8997984,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8998112,"byte_end":8998116,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8998714,"byte_end":8998718,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8999180,"byte_end":8999184,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":8999673,"byte_end":8999677,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9000174,"byte_end":9000178,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9000639,"byte_end":9000643,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9001104,"byte_end":9001108,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9001609,"byte_end":9001613,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9002111,"byte_end":9002115,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003523,"byte_end":9003528,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003591,"byte_end":9003596,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003683,"byte_end":9003688,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9003837,"byte_end":9003842,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004857,"byte_end":9004862,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004957,"byte_end":9004962,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9004984,"byte_end":9004989,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9005117,"byte_end":9005122,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9005722,"byte_end":9005727,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9006142,"byte_end":9006147,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9006593,"byte_end":9006598,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007060,"byte_end":9007065,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007480,"byte_end":9007485,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9007900,"byte_end":9007905,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9008373,"byte_end":9008378,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9008843,"byte_end":9008848,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010361,"byte_end":9010366,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010429,"byte_end":9010434,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010521,"byte_end":9010526,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010685,"byte_end":9010690,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010785,"byte_end":9010790,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010812,"byte_end":9010817,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9010955,"byte_end":9010960,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011246,"byte_end":9011251,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011548,"byte_end":9011553,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9011839,"byte_end":9011844,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012141,"byte_end":9012146,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012432,"byte_end":9012437,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9012734,"byte_end":9012739,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013025,"byte_end":9013030,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013324,"byte_end":9013329,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013599,"byte_end":9013604,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9013939,"byte_end":9013944,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9014405,"byte_end":9014410,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9014904,"byte_end":9014909,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9015363,"byte_end":9015368,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9015834,"byte_end":9015839,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9016305,"byte_end":9016310,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9016768,"byte_end":9016773,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9017228,"byte_end":9017233,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018708,"byte_end":9018712,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018775,"byte_end":9018779,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9018865,"byte_end":9018869,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9019015,"byte_end":9019019,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020033,"byte_end":9020037,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020132,"byte_end":9020136,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020158,"byte_end":9020162,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020290,"byte_end":9020294,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9020892,"byte_end":9020896,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9021378,"byte_end":9021382,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9021883,"byte_end":9021887,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9022396,"byte_end":9022400,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9022881,"byte_end":9022885,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9023366,"byte_end":9023370,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9023883,"byte_end":9023887,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9024397,"byte_end":9024401,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025820,"byte_end":9025825,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025888,"byte_end":9025893,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9025980,"byte_end":9025985,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9026134,"byte_end":9026139,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027154,"byte_end":9027159,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027254,"byte_end":9027259,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027281,"byte_end":9027286,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9027414,"byte_end":9027419,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028019,"byte_end":9028024,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028439,"byte_end":9028444,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9028890,"byte_end":9028895,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9029357,"byte_end":9029362,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9029777,"byte_end":9029782,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9030197,"byte_end":9030202,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9030670,"byte_end":9030675,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9031140,"byte_end":9031145,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032658,"byte_end":9032663,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032726,"byte_end":9032731,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032818,"byte_end":9032823,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9032982,"byte_end":9032987,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033082,"byte_end":9033087,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033109,"byte_end":9033114,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033252,"byte_end":9033257,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033543,"byte_end":9033548,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9033846,"byte_end":9033851,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034140,"byte_end":9034145,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034444,"byte_end":9034449,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9034735,"byte_end":9034740,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035037,"byte_end":9035042,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035328,"byte_end":9035333,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035632,"byte_end":9035637,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9035922,"byte_end":9035927,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9036272,"byte_end":9036277,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9310}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9036750,"byte_end":9036755,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9317}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9037261,"byte_end":9037266,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9037732,"byte_end":9037737,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9329}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9038223,"byte_end":9038228,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9331}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9038714,"byte_end":9038719,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9323}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9039189,"byte_end":9039194,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9325}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9039661,"byte_end":9039666,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9079740,"byte_end":9079744,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9079888,"byte_end":9079892,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3087}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080003,"byte_end":9080007,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080160,"byte_end":9080164,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080277,"byte_end":9080281,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080431,"byte_end":9080435,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080548,"byte_end":9080552,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080705,"byte_end":9080709,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080820,"byte_end":9080824,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3071}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9080968,"byte_end":9080972,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3099}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081080,"byte_end":9081084,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3066}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081228,"byte_end":9081232,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3095}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081340,"byte_end":9081344,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081482,"byte_end":9081486,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081849,"byte_end":9081853,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3061}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9081997,"byte_end":9082001,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9082115,"byte_end":9082119,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183463,"byte_end":9183468,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183613,"byte_end":9183618,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3087}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183729,"byte_end":9183734,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9183888,"byte_end":9183893,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184006,"byte_end":9184011,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184162,"byte_end":9184167,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184280,"byte_end":9184285,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184439,"byte_end":9184444,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184555,"byte_end":9184560,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3071}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184705,"byte_end":9184710,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3099}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184818,"byte_end":9184823,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3066}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9184968,"byte_end":9184973,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3095}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185081,"byte_end":9185086,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185226,"byte_end":9185231,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185595,"byte_end":9185600,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3061}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185745,"byte_end":9185750,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9185864,"byte_end":9185869,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186279,"byte_end":9186284,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186438,"byte_end":9186443,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186556,"byte_end":9186561,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186712,"byte_end":9186717,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186830,"byte_end":9186835,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9186989,"byte_end":9186994,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187105,"byte_end":9187110,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187462,"byte_end":9187467,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\andrew.wheeler.STRUCTURETEC\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9187817,"byte_end":9187822,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2645}}]}